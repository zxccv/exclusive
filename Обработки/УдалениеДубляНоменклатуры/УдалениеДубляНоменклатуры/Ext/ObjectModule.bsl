//1.01. Притула. 09.08.2018. выполнение обработки теперь запускается под полными правами; Архипова Марина добавлена круг избранных)
//1.02. Притула. 31.08.2018. так как обработка теперь вызывается из обработки проверки созданных номенклатур (б/у) в перечень проверяемых документов добавлена пересортица
//1.02. Гризодуб 08.10.2018. Архипова Марина удалена из круга избранных
Перем мОбъектыКонфигурации;
Перем мОбщиеМодулиЗаменыСсылочныхЭлементовДоступны Экспорт;
Перем мЭтоКлиентСервер Экспорт;

Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = Новый Структура;
	
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Справочник.Номенклатура");
	
    ПараметрыРегистрации.Вставить("Вид", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта());
    ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    ПараметрыРегистрации.Вставить("Наименование", МетаДанные().Синоним);
	
	ПараметрыРегистрации.Вставить("Версия", "1.03");
	
    ПараметрыРегистрации.Вставить("Информация", МетаДанные().Комментарий);
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
    ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	
    Команды = ТаблицаКоманд();
    ДобавитьКоманду(Команды,
                    НСтр("ru = '" + МетаДанные().Синоним + "'"),
                    ""+МетаДанные().Имя,
                    ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода(),
                    Ложь,
                    "");
					
    ПараметрыРегистрации.Вставить("Команды", Команды);
	
    Возврат ПараметрыРегистрации; 
	
КонецФункции

Функция ТаблицаКоманд()
    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
//	ОСНОВНЫЯ ФУНКЦИЯ ЗАМЕНЫ ССЫЛОК

//	Выполняет замены ссылок по таблице замен, это основная функция выполнения замен.
//
//	Параметры:
//		ТаблицаЗамен (ТаблицаЗначений) - ПравильнаяСсылка, Ссылка, Метаданные, Данные.
//		ДополнительныеПараметры (Структура) - возможные значения структуры можно узнать в процедуре "ИнициализацияДополнительныхПараметров".
//		Отказ - если замены выполняются в одной транзакции и произошел откат этой транзакции, то параметр выставлется в Истина.
//
//	Возвращает: значение (Булево) - если "Истина" значит в время обработки возникали исключения.
//
Функция ВыполнитьЗаменуЭлементов(ТаблицаЗамен, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИнициализацияДополнительныхПараметров(ДополнительныеПараметры);
	
	#Если Сервер Тогда
		Если ДополнительныеПараметры.ВыполнятьПодПолнымиПравами Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
	#КонецЕсли
			
	//	Нормализация таблицы замен
	Если ДополнительныеПараметры.НормализоватьТаблицуЗамен Тогда
		НормализоватьТаблицуЗамен(ТаблицаЗамен);
		ДополнительныеПараметры.ТаблицаЗаменНормализована = Истина;
		ДополнительныеПараметры.НормализоватьТаблицуЗамен = Ложь;
	КонецЕсли;
	
	#Если Не Сервер Тогда
		Если ДополнительныеПараметры.ВыполнятьНаСервере
			Или ДополнительныеПараметры.ВыполнятьПодПолнымиПравами
			Или ДополнительныеПараметры.ВыполнятьКакФоновоеЗадание Тогда
			Возврат ВыполнитьЗаменуЭлементовНаСервере(ТаблицаЗамен, ДополнительныеПараметры);
		КонецЕсли;
	#Иначе
		Если ДополнительныеПараметры.ВыполнятьКакФоновоеЗадание
			И Не ДополнительныеПараметры.ЭтоФоновоеЗадание Тогда
			Возврат ВыполнитьЗаменуЭлементовНаСервере(ТаблицаЗамен, ДополнительныеПараметры);
		КонецЕсли;
	#КонецЕсли
	
	//	Обрабочик: "ПередВыполнениемЗаменыЭлементов"
	ОбработчикСобытия_ПередВыполнениемЗаменыЭлементов(ТаблицаЗамен, ДополнительныеПараметры);
	
	ВыполнитьЗаменуЭлементовНаПравильные(ТаблицаЗамен, ДополнительныеПараметры);
	
	//	Обрабочик: "ПослеВыполненияЗаменыЭлементов"
	ОбработчикСобытия_ПослеВыполненияЗаменыЭлементов(ДополнительныеПараметры);
	
	//	Выводим сообщение в фоновом задании с дополнительными параметрыми.
	Если ДополнительныеПараметры.ЭтоФоновоеЗадание Тогда
		СоздатьСообщениеСДополнительнымиПараметрами(ДополнительныеПараметры).Сообщить();
	КонецЕсли;
	
	Возврат ДополнительныеПараметры.БылиИсключения;
	
КонецФункции

//	Формирует таблицу замен по соответствию замен и поиском по ссылкам.
//
Функция СформироватьТаблицуЗамен(СоответствияЗамен, ВключаемыеМетаданные = Неопределено, ИсключаемыеМетаданные = Неопределено, Нормализовать = Ложь) Экспорт
	
	Если Нормализовать Тогда
		НормализоватьСоответствияЗамен(СоответствияЗамен);
	КонецЕсли;
	
	СсылкиДляПоиска = ВыгрузитьУникальныеЗначенияКолонки(СоответствияЗамен, , "Ссылка");

	ТаблицаЗамен = НайтиПоСсылкам(СсылкиДляПоиска);
	ТаблицаЗамен.Колонки.Добавить("ПравильнаяСсылка");
	
	КоличествоСтрока = ТаблицаЗамен.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрока Цикл
		
		СтрокаЗамены = ТаблицаЗамен[КоличествоСтрока - ОбратныйИндекс];
		
		//	{Фильтр по метаданным
		Если ВключаемыеМетаданные <> Неопределено И ВключаемыеМетаданные.Найти(СтрокаЗамены.Метаданные) = Неопределено Тогда
			ТаблицаЗамен.Удалить(СтрокаЗамены);			
			Продолжить;
		КонецЕсли;
		
		Если ИсключаемыеМетаданные <> Неопределено И ИсключаемыеМетаданные.Найти(СтрокаЗамены.Метаданные) <> Неопределено Тогда
			ТаблицаЗамен.Удалить(СтрокаЗамены);
			Продолжить;
		КонецЕсли;
		//	}Фильтр по метаданным
		
		//	Устанавливаем правильную ссылку
		СтрокаЗамены.ПравильнаяСсылка = СоответствияЗамен.Найти(СтрокаЗамены.Ссылка, "Ссылка").ПравильнаяСсылка;
		
	КонецЦикла;
	
	Возврат ТаблицаЗамен;
	
КонецФункции

//	ФОНОВЫЕ ЗАДАНИЯ

//	Возвращает массив фоновых заданий выполнения замены элементов.
//
Функция ПолучитьФоновыеЗаданияЗамены(Отбор = Неопределено, ТолькоАктивные = Ложь) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Отбор.Вставить("ИмяМетода", "ЗаменаСсылочныхЭлементов.ВыполнитьЗаменуЭлементов");
	Если ТолькоАктивные Тогда
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	КонецЕсли;
	
	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
КонецФункции

//	Считывает сообщения фонового задания после его выполнения, из сообщения
//	восстанавливается структура дополнительных параметров.
//
Функция ПрочитатьСообщенияФоновогоЗаданияЗамены(Знач ФоновоеЗадание, ДополнительныеПараметры)
	
	Если ТипЗнч(ФоновоеЗадание) = Тип("УникальныйИдентификатор") Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание);
	КонецЕсли;
	
	МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из МассивСообщений Цикл
		
		Отказ = Ложь;		
		
		//	Обработчик: "ПередЧтениемСообщенияФоновогоЗаданияЗамены"
		ОбработчикСобытия_ПередЧтениемСообщенияФоновогоЗаданияЗамены(Сообщение, ФоновоеЗадание, ДополнительныеПараметры, Отказ);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеПараметрыИзСообщения = ПрочитатьДополнительныеПараметрыИзСообщения(Сообщение);
		Если ДополнительныеПараметрыИзСообщения <> Неопределено Тогда
			
			ДополнительныеПараметры = ДополнительныеПараметрыИзСообщения;
			ДополнительныеПараметры.ЭтоФоновоеЗадание = Ложь;
			ДополнительныеПараметры.ИдентификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
			
		Иначе
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции



/////////////////////////////////////////////////////////////////////////////////////
//	ИНИЦИАЛИЗАЦИЯ ДОПОЛНИТЕЛЬНЫХ ПАРАМЕТРОВ

//	Инициализация свойств замены элементов на сервере
//
Процедура ИнициализацияДополнительныхПараметров(ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	//	Взывает функцию из модуля "ЗаменаСсылочныхЭлементовПолныеПрава".
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ВыполнятьПодПолнымиПравами", Истина, "Булево");	
		
	//	Выполнение обработки как фоновое задание.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ВыполнятьКакФоновоеЗадание", Ложь, "Булево");	
	
	//	Признак того, что замена ссылок выполняется в контексте фонового задания.
	//	(необходимо для избежания зацикливания при рекурсивных вызовах)
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ЭтоФоновоеЗадание", Ложь, "Булево");
		
	//	Инициализируем параметры фонового задания, фоновое задание может 
	//	использоваться для возврата его на клиенте через структуру параметров.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ИдентификаторФоновогоЗадания", Неопределено);	
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "КлючФоновогоЗадания", "ЗаменаСсылочныхЭлементов", "Строка");
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "НаименованиеФоновогоЗадания", "Выполнение замены ссылок", "Строка");
	
	//	Выполнение обработки замены на сервере.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ВыполнятьНаСервере", Ложь, "Булево");
		
	//	Выполнение замен в одной траназакции.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ВыполнятьВТранзакции", Ложь, "Булево");
	
	//	Количество объектов, в которых выполняется замена ссылок, в одной транзакции.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "КоличествоОбъектовВТранзакции", 0, "Число");
		
	//	Если нет активной единой транзакции, то на запись каждого объекта отдельно можно открыть транзакцию.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ВыполнятьЗаписьОбъектаВТранзакции", Истина, "Булево");
		
	//	Флаг возникновения исключений во время выполнения замены ссылок.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "БылиИсключения", Ложь, "Булево");
	
	//	Установка параметров объекта "ОбменДанными".
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ОбменДанными", Новый Структура, "Структура");
	
	//	Установка параметров объекта "ПрерватьВыполнениеЗамены".
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ПрерватьВыполнениеЗамены", Ложь, "Булево");
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ЗафиксироватьТранзакциюПриПрерыванииВыполненияЗамены", Ложь, "Булево");
	
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "КоличествоОбработанныхОбъектов", Ложь);
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "КоличествоВыполненныхЗамен", Ложь);
	
	//	Запуск процедуры нормализации таблицы замен.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "НормализоватьТаблицуЗамен", Ложь, "Булево");
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ТаблицаЗаменНормализована", Ложь, "Булево");
	
	
	//	Инициализация таблицы исключений.
	ТаблицаИсключений = Новый ТаблицаЗначений;
	ТаблицаИсключений.Колонки.Добавить("Данные");
	ТаблицаИсключений.Колонки.Добавить("ОписаниеОшибки");
	ДополнительныеПараметры.Вставить("ТаблицаИсключений", ТаблицаИсключений);
	
	//	Инициализация переменной с текстом последней ошибки.
	ДополнительныеПараметры.Вставить("ОписаниеПоследнейОшибки", "");
	
	//	Иницилазиация обработчиков.
	МассивОбработчиков = Новый Массив;
	МассивОбработчиков.Добавить("ИнициализацияДополнительныхПараметров");
	МассивОбработчиков.Добавить("ПередВыполнениемЗаменыЭлементов");
	МассивОбработчиков.Добавить("ПередПолучениемОбъектаИзБазыДанных");
	МассивОбработчиков.Добавить("ПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте");
	МассивОбработчиков.Добавить("ПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте");
	МассивОбработчиков.Добавить("ПередЗаписьюОбъектаВБазуДанных");
	МассивОбработчиков.Добавить("ПослеВыполненияЗаменыЭлементов");
	МассивОбработчиков.Добавить("ПередЧтениемСообщенияФоновогоЗаданияЗамены");
	
	Для Каждого Обработчик Из МассивОбработчиков Цикл
		ИмяСвойстваСТекстомОбработчика = "Обработчик" + Обработчик;
		ИнициализироватьДопПараметр(ДополнительныеПараметры, ИмяСвойстваСТекстомОбработчика, "", "Строка");
		ДополнительныеПараметры.Вставить("ЕстьОбработчик" + Обработчик, Не ПустаяСтрока(ДополнительныеПараметры[ИмяСвойстваСТекстомОбработчика]));
	КонецЦикла;
	
	//	Обработчик: "ИнициализацияДополнительныхПараметров"
	ОбработчикСобытия_ИнициализацияДополнительныхПараметров(ДополнительныеПараметры);
	
КонецПроцедуры

//	Инициализация свойства в структуе с определенными именем и значение по умолчанию
//
Функция ИнициализироватьДопПараметр(ДопПараметры, Имя, ЗначениеПоУмолчанию = Неопределено, ТипыСтрокой = Неопределено) Экспорт
	
	Если Не ДопПараметры.Свойство(Имя) Тогда
		ДопПараметры.Вставить(Имя, ЗначениеПоУмолчанию);
	КонецЕсли;
	
	Если ТипыСтрокой <> Неопределено Тогда
		ОписаниеТипа = Новый ОписаниеТипов(ТипыСтрокой);
		ДопПараметры[Имя] = ОписаниеТипа.ПривестиЗначение(ДопПараметры[Имя]);
	КонецЕсли;
	
	Возврат ДопПараметры[Имя];
	
КонецФункции


//	ПЕРЕДАЧА ДОПОЛНИТЕЛЬНЫХ ПАРАМЕТРОВ ЧЕРЕЗ СООБЩЕНИЕ

//	Возвращает сообщение, в тексте которого хранятся дополнительные параметры
//	механизма замены ссылок.
//
Функция СоздатьСообщениеСДополнительнымиПараметрами(ДополнительныеПараметры)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ИдентификаторДополнительныхПараметровЗаменыСсылок() + ":" + ЗначениеВСтрокуВнутр(ДополнительныеПараметры);
	
	Возврат Сообщение;
	
КонецФункции

//	Прочитать дополнительные параметры из сообщения.
//
Функция ПрочитатьДополнительныеПараметрыИзСообщения(Сообщение)
	Если Найти(Сообщение.Текст, ИдентификаторДополнительныхПараметровЗаменыСсылок() + ":") = 1 Тогда
		Попытка 
			Возврат ЗначениеИзСтрокиВнутр(СтрЗаменить(Сообщение.Текст, ИдентификаторДополнительныхПараметровЗаменыСсылок() + ":", ""));
		Исключение
		КонецПопытки;
	КонецЕсли;	
КонецФункции

//	Идентификатор дополнительных свойств замены ссылок, используется
//	для передачи дополнительных свойств через сообщения ФЗ.
//
Функция ИдентификаторДополнительныхПараметровЗаменыСсылок()
	Возврат "REPLACEMENT_REFERENCE_ITEMS_ADDITIONAL_SETTINGS";
КонецФункции



/////////////////////////////////////////////////////////////////////////////////////
//	ПРЕОБРАЗОВАНИЕ ТАБЛИЦЫ ЗАМЕН

//	Заменяем несериализуемые данные на строковые представления.
//
Процедура ПреобразоватьТаблицуЗаменДляОтправкиНаСервер(ТаблицаЗамен)
	
	Соответствие = Новый Соответствие;
	
	МассивМетаданных = ВыгрузитьУникальныеЗначенияКолонки(ТаблицаЗамен, , "Метаданные");
	Для Каждого ОбъектМетаданых Из МассивМетаданных Цикл
		Если ТипЗнч(ОбъектМетаданых) = Тип("ОбъектМетаданных") Тогда
			Соответствие.Вставить(ОбъектМетаданых, ОбъектМетаданых.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Если Соответствие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗамены Из ТаблицаЗамен Цикл
		ПолноеИмяОбъектаМетаданных = Соответствие[СтрокаЗамены.Метаданные];
		Если ЗначениеЗаполнено(ПолноеИмяОбъектаМетаданных) Тогда
			СтрокаЗамены.Метаданные = ПолноеИмяОбъектаМетаданных;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//	Преобразование таблицы замен в нормальный вид:
//	- удаление строк, где НеправильнаяСсылка = ПравильнаяСсылка
//	- удаление зацикленных замен - "Ссылка1 -> Ссылка2 -> Ссылка1"
//	- преобразование замены "Ссылка1 -> Ссылка2 - Ссылка3" на "Ссылка1 -> Ссылка3"
//
Процедура НормализоватьТаблицуЗамен(ТаблицаЗамен, ЕстьИзменения = Ложь)
	
	СоответствияЗамен = ТаблицаЗамен.Скопировать(, "Ссылка, ПравильнаяСсылка");
	СоответствияЗамен.Индексы.Добавить("Ссылка");
	СоответствияЗамен.Индексы.Добавить("ПравильнаяСсылка");
	
	НормализоватьСоответствияЗамен(СоответствияЗамен, ЕстьИзменения);
	
	Если ЕстьИзменения Тогда
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаЗамены Из ТаблицаЗамен Цикл
			НайденнаяСтрока = СоответствияЗамен.Найти(СтрокаЗамены.Ссылка, "Ссылка");
			Если НайденнаяСтрока <> Неопределено Тогда
				СтрокаЗамены.ПравильнаяСсылка = НайденнаяСтрока.ПравильнаяСсылка;
			Иначе
				СтрокиКУдалению.Добавить(СтрокаЗамены);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаЗамен.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

//	Преобразование таблицы соответствий замен.
//
Процедура НормализоватьСоответствияЗамен(СоответствияЗамен, ЕстьИзменения = Ложь)
	
	СоответствияЗамен.Свернуть("Ссылка, ПравильнаяСсылка");
	
	СтрокиКУдалению = Новый Соответствие;
	Для Каждого СтрокаЗамены Из СоответствияЗамен Цикл
		
		//	Удаляем строки, в которых правильная и неправильная ссылки одинаковые.
		Если СтрокаЗамены.ПравильнаяСсылка = СтрокаЗамены.Ссылка Тогда
			СтрокиКУдалению.Вставить(СтрокаЗамены);
			Продолжить;
		КонецЕсли;
		
		//	Если текущая неправильная ссылка текущий строки в других
		//	строках является правильной, то изменяем в тех строках
		//	правильную ссылку на правильную ссылку в текущей строке.
		Отбор = Новый Структура("ПравильнаяСсылка", СтрокаЗамены.Ссылка);
		НайденныеСтроки = СоответствияЗамен.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЕстьИзменения = Истина;
			НайденнаяСтрока.ПравильнаяСсылка = СтрокаЗамены.ПравильнаяСсылка;
		КонецЦикла;
		
		//	Ищем неправильную ссылку текущей строки, среди неправильных
		//	ссылок друих строк таблицы замен. Считаем верной строкой
		//	последную строку в массиве найденных строк.
		Отбор = Новый Структура("Ссылка", СтрокаЗамены.Ссылка);
		НайденныеСтроки = СоответствияЗамен.НайтиСтроки(Отбор);
		Для НомерСтроки = 1 По НайденныеСтроки.Количество() - 1 Цикл
			СтрокиКУдалению.Вставить(НайденныеСтроки[НомерСтроки - 1]);
		КонецЦикла;
				
	КонецЦикла;
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
		ЕстьИзменения = Истина;
		Для Каждого КлючИЗначение Из СтрокиКУдалению Цикл
			СоответствияЗамен.Удалить(КлючИЗначение.Ключ);
		КонецЦикла;
		НормализоватьСоответствияЗамен(СоответствияЗамен, ЕстьИзменения);
	КонецЕсли;

КонецПроцедуры



/////////////////////////////////////////////////////////////////////////////////////
//	ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ЗАМЕНЫ ССЫЛОК

//	Заускает выполнение замены ссылок на сервере или как фоновое задание.
//
Функция ВыполнитьЗаменуЭлементовНаСервере(ТаблицаЗамен, ДополнительныеПараметры)
	
	ПреобразоватьТаблицуЗаменДляОтправкиНаСервер(ТаблицаЗамен);
	
	ДополнительныеПараметры.ЭтоФоновоеЗадание = Истина;
	
	ПараметрыЗаменыЭлементов = Новый Массив;
	ПараметрыЗаменыЭлементов.Добавить(ТаблицаЗамен);
	ПараметрыЗаменыЭлементов.Добавить(ДополнительныеПараметры);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ЗаменаСсылочныхЭлементов.ВыполнитьЗаменуЭлементов",
		ПараметрыЗаменыЭлементов,
		ДополнительныеПараметры.КлючФоновогоЗадания,
		ДополнительныеПараметры.НаименованиеФоновогоЗадания
	);
	
	ДополнительныеПараметры.ЭтоФоновоеЗадание = Ложь;
	ДополнительныеПараметры.ИдентификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	
	Если Не ДополнительныеПараметры.ВыполнятьКакФоновоеЗадание Тогда
		ФоновоеЗадание.ОжидатьЗавершения();
		ПрочитатьСообщенияФоновогоЗаданияЗамены(ФоновоеЗадание, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
		ДополнительныеПараметры.БылиИсключения = Истина;
	КонецЕсли;
	
	Возврат ДополнительныеПараметры.БылиИсключения;
	
КонецФункции

//	Выполняет замену элментов по таблице замен на правильные элементы.
//
Процедура ВыполнитьЗаменуЭлементовНаПравильные(ТаблицаЗамен, ДополнительныеПараметры)
	
	//СообщитьОДействии("Начало", "Начало замены: " + ТекущаяДата());
	
	Если ДополнительныеПараметры.ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ОбменДанными = ДополнительныеПараметры.ОбменДанными;
	КоличествоОбъектовВТранзакции = ДополнительныеПараметры.КоличествоОбъектовВТранзакции;
	ВыполнятьВТранзакции = ДополнительныеПараметры.ВыполнятьВТранзакции;
	ВыполнятьЗаписьОбъектаВТранзакции = Не ВыполнятьВТранзакции И ДополнительныеПараметры.ВыполнятьЗаписьОбъектаВТранзакции;
	
	ТаблицаЗамен.Индексы.Очистить();
	ТаблицаЗамен.Индексы.Добавить("Метаданные, Данные");
	
	ИспользованиеОбщихРеквизитов = ТаблицаИспользованияОбщихРеквизитов();
	
	ТаблицаДанныхСЗаменами = ВыгрузитьУникальныеЗначенияКолонок(ТаблицаЗамен, , "Метаданные, Данные");
	
	КоличествоОбработанныхОбъектов = 0;
	
	//	Для индикациии хода выполнения замены объектов.
	КоличествоДанныхСЗаменами = ТаблицаДанныхСЗаменами.Количество();
	
	МетаданныеСЗаменами = ВыгрузитьУникальныеЗначенияКолонки(ТаблицаДанныхСЗаменами, , "Метаданные");
	Для Каждого ЭлементМетаданных Из МетаданныеСЗаменами Цикл
		
		//	Получим объект метаданных.
		Если ТипЗнч(ЭлементМетаданных) = Тип("ОбъектМетаданных") Тогда
			ОбъектМетаданных = ЭлементМетаданных;
		ИначеЕсли ТипЗнч(ЭлементМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементМетаданных);
		Иначе
			ОбъектМетаданных = Неопределено;
		КонецЕсли;
		
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БазовыйТипОбъекта = ПолучитьБазовыйТипОбъекта(ОбъектМетаданных);
		
		//	Общие реквизиты объекта метаданных.
		Отбор = Новый Структура("Метаданные", ОбъектМетаданных);
		ОбщиеРеквизитыОбъекта = ИспользованиеОбщихРеквизитов.Скопировать(Отбор, "Имя, Тип");
		
		Отбор = Новый Структура("Метаданные", ЭлементМетаданных);
		ДанныеСЗаменами = ВыгрузитьУникальныеЗначенияКолонки(ТаблицаДанныхСЗаменами, Отбор, "Данные");
		
		Для Каждого Данные Из ДанныеСЗаменами Цикл
			
			//	Очищаем (инициализируем) пременные.
			Объект = Неопределено;
			НаборыЗаписейДвижений = Неопределено;
			НаборыЗаписейПоследовательностей = Неопределено;
			КопияНабораЗаписейРегистраСведений = Неопределено;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			//	Если выполнение замены происходит вне единой транзакции, то устанавливаем транзакцию 
			//	на время выполнения замены ссылок в рамках одного объекта.
			Если ВыполнятьЗаписьОбъектаВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			//	{УЧАСТОК ДЕЙСТВИЯ ТРАНЗАКЦИИ НА УРОВНЕ ОБЪЕКТА
			
			Отказ = Ложь;
			
			//	Обработчик: "ПередПолучениемОбъектаИзБазыДанных".
			ОбработчикСобытия_ПередПолучениемОбъектаИзБазыДанных(
				Данные,
				БазовыйТипОбъекта,
				ОбъектМетаданных,
				КоличествоДанныхСЗаменами,
				ДополнительныеПараметры.КоличествоОбработанныхОбъектов,
				ДополнительныеПараметры,
				Отказ
			);
									
			//	Если парамер выставлен в истина, то прерывается выполнение замены.
			Если ДополнительныеПараметры.ПрерватьВыполнениеЗамены Тогда
				
				Если ТранзакцияАктивна() Тогда
					Если ДополнительныеПараметры.ЗафиксироватьТранзакциюПриПрерыванииВыполненияЗамены Тогда
						ЗафиксироватьТранзакцию();
					Иначе
						ОтменитьТранзакцию();
					КонецЕсли;
				КонецЕсли;				
				
				ТекстСообщения = "Выполнено прерывание выполнения замены ссылочных элементов";
				
				//СообщитьОДействии("ПрерываниеЗаменыСсылок", ТекстСообщения, , , , , Данные, ОбъектМетаданных);
				
				Возврат;
				
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;			
			
			//	Чтение объекта с ссылками для замены из базы данных.
			Отказ = Ложь;
			ПрочитатьОбъектИзБазыДанных(
				Данные,
				БазовыйТипОбъекта,
				ОбъектМетаданных,
				Объект,
				НаборыЗаписейДвижений,
				НаборыЗаписейПоследовательностей,
				КопияНабораЗаписейРегистраСведений,
				ДополнительныеПараметры,
				Отказ
			);			
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("Метаданные, Данные", ЭлементМетаданных, Данные);
			ТаблицаСсылок = ВыгрузитьУникальныеЗначенияКолонок(ТаблицаЗамен, Отбор, "ПравильнаяСсылка, Ссылка");
			
			//	Массив правильных ссылок для конкрентного объекта данных.
			ПравильныеСсылки = ВыгрузитьУникальныеЗначенияКолонки(ТаблицаСсылок, , "ПравильнаяСсылка");
			Для Каждого ПравильнаяСсылка Из ПравильныеСсылки Цикл
				
				Отбор = Новый Структура("ПравильнаяСсылка", ПравильнаяСсылка);
				НеправильныеСсылки = ВыгрузитьУникальныеЗначенияКолонки(ТаблицаСсылок, Отбор, "Ссылка");
				
				Отказ = Ложь;
				
				//	Обработчик: ПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте.
				ОбработчикСобытия_ПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте(
					Данные,
					Объект,
					БазовыйТипОбъекта,
					ОбъектМетаданных,
					ОбщиеРеквизитыОбъекта,
					НаборыЗаписейДвижений,
					НаборыЗаписейПоследовательностей,
					ПравильнаяСсылка,
					НеправильныеСсылки,
					ДополнительныеПараметры,
					Отказ
				);
				
				Если Отказ Тогда
					Продолжить;
				КонецЕсли;
				
				//	Замены неправильных ссылок в объекте на правильную ссылку.
				ВыполнитьЗаменуВОбъектеНаПравильныйЭлемент(
					Данные,
					Объект,
					БазовыйТипОбъекта,
					ОбъектМетаданных,
					ОбщиеРеквизитыОбъекта,
					НаборыЗаписейДвижений,
					НаборыЗаписейПоследовательностей,
					ПравильнаяСсылка,
					НеправильныеСсылки,
					ДополнительныеПараметры,
					ИспользованиеОбщихРеквизитов
				);
				
			КонецЦикла;
			
			Отказ = Ложь;
			
			//	Обработчик: "ПередЗаписьюОбъектаВБазуДанных".
			ОбработчикСобытия_ПередЗаписьюОбъектаВБазуДанных(
				Данные,
				Объект,
				БазовыйТипОбъекта,
				ОбъектМетаданных,
				НаборыЗаписейДвижений,
				НаборыЗаписейПоследовательностей,
				КопияНабораЗаписейРегистраСведений,
				ОбменДанными,
				ДополнительныеПараметры,
				Отказ
			);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
						
			//	Запись объекта в базу данных после выполнения замен.
			Отказ = Ложь;
			ЗаписатьОбъектВБазуДанных(
				Данные,
				Объект,
				БазовыйТипОбъекта,
				ОбъектМетаданных,
				НаборыЗаписейДвижений,
				НаборыЗаписейПоследовательностей,
				КопияНабораЗаписейРегистраСведений,
				ОбменДанными,
				ДополнительныеПараметры,
				Отказ
			);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
									
			//	}УЧАСТОК ДЕЙСТВИЯ ТРАНЗАКЦИИ НА УРОВНЕ ОБЪЕКТА
			
			//	Счетчик обработанных объектов.
			КоличествоОбработанныхОбъектов = КоличествоОбработанныхОбъектов + 1;
			ДополнительныеПараметры.КоличествоОбработанныхОбъектов = КоличествоОбработанныхОбъектов;
			
			//	Фиксируем транзакцию.
			Если ВыполнятьЗаписьОбъектаВТранзакции И ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			ИначеЕсли ВыполнятьВТранзакции И КоличествоОбъектовВТранзакции <> 0 Тогда
				Если  КоличествоОбработанныхОбъектов % КоличествоОбъектовВТранзакции = 0 И ТранзакцияАктивна() Тогда
					ЗафиксироватьТранзакцию();
					НачатьТранзакцию();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//СообщитьОДействии("Конец", "Конец замены: " + ТекущаяДата());
	
КонецПроцедуры

//	Выполняет в объекте замену ссылок на одну правильную ссылку.
//
Процедура ВыполнитьЗаменуВОбъектеНаПравильныйЭлемент(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		ОбщиеРеквизитыОбъекта,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		ПравильнаяСсылка,
		НеправильныеСсылки,
		ДополнительныеПараметры,
		ИспользованиеОбщихРеквизитов
	)
	
	СтандартныеРеквизитыРегистров = Новый Массив;
	СтандартныеРеквизитыРегистров.Добавить("Счет");
	СтандартныеРеквизитыРегистров.Добавить("СчетДт");
	СтандартныеРеквизитыРегистров.Добавить("СчетКт");
	СтандартныеРеквизитыРегистров.Добавить("ВидРасчета");
	
	ОбъектМодифицирован = Ложь;
	
	Для Каждого Ссылка Из НеправильныеСсылки Цикл
		
		Если Ссылка = ПравильнаяСсылка Тогда
			Продолжить; //	Замена не имеет смысла.
		КонецЕсли;
		
		Отказ = Ложь;
		
		//	Обработчик: "ПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте"
		ОбработчикСобытия_ПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте(
			Данные,
			Объект,
			БазовыйТипОбъекта,
			ОбъектМетаданных,
			ОбщиеРеквизитыОбъекта,
			НаборыЗаписейДвижений,
			НаборыЗаписейПоследовательностей,
			ПравильнаяСсылка,
			Ссылка,
			ДополнительныеПараметры,
			Отказ
		);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗнчСсылка = ТипЗнч(Ссылка);
				
		Если БазовыйТипОбъекта = "Документ"
			Или БазовыйТипОбъекта = "Справочник"
			Или БазовыйТипОбъекта = "ПланВидовХарактеристик"
			Или БазовыйТипОбъекта = "ПланСчетов"
			Или БазовыйТипОбъекта = "ПланВидовРасчета"
			Или БазовыйТипОбъекта = "Задача"
			Или БазовыйТипОбъекта = "БизнесПроцесс"
			Или БазовыйТипОбъекта = "ПланОбмена" Тогда
			
			//	ССЫЛОЧНЫЙ ОБЪЕКТ
						
			//	Общие реквизиты.
			Для Каждого ОбщийРеквизит Из ОбщиеРеквизитыОбъекта Цикл
				Если Объект[ОбщийРеквизит.Имя] = Ссылка Тогда
					Объект[ОбщийРеквизит.Имя] = ПравильнаяСсылка;
					ОбъектМодифицирован = Истина;
				КонецЕсли;
			КонецЦикла;
			
			//	Реквизиты.
			Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				Если Объект[Реквизит.Имя] = Ссылка Тогда
					Объект[Реквизит.Имя] = ПравильнаяСсылка;
					ОбъектМодифицирован = Истина;
				КонецЕсли;
			КонецЦикла;
			
			//	Табличные части.
			Для Каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнчСсылка) Тогда
						СтрокаТабЧасти = Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильнаяСсылка;
							СтрокаТабЧасти = Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							ОбъектМодифицирован = Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			//	Владелец.
			Если БазовыйТипОбъекта = "Справочник" Тогда
				Если ОбъектМетаданных.Владельцы.Количество() > 0 И Объект.Владелец = Ссылка Тогда
					Объект.Владелец = ПравильнаяСсылка;
					ОбъектМодифицирован = Истина;
				КонецЕсли;
			КонецЕсли;
			
			//	Родитель.
			Если БазовыйТипОбъекта = "Справочник" Или БазовыйТипОбъекта = "ПланВидовХарактеристик" Тогда
				Если ОбъектМетаданных.Иерархический И Объект.Родитель = Ссылка Тогда
					Объект.Родитель = ПравильнаяСсылка;
					ОбъектМодифицирован = Истина;
				КонецЕсли;				
			КонецЕсли;
			
			//	Родитель плана счетов.
			Если БазовыйТипОбъекта = "ПланСчетов" Тогда
				Если Объект.Родитель = Ссылка Тогда
					Объект.Родитель = ПравильнаяСсылка;
					ОбъектМодифицирован = Истина;
				КонецЕсли;				
			КонецЕсли;
			
			//	Стандартные табличные части.
			Если БазовыйТипОбъекта = "ПланСчетов" Или БазовыйТипОбъекта = "ПланВидовРасчета" Тогда				                                  
				Для Каждого ТЧ Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл						
					Для Каждого Реквизит Из ТЧ.СтандартныеРеквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнчСсылка) Тогда
							СтрокаТабЧасти = Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильнаяСсылка;
								СтрокаТабЧасти = Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
								ОбъектМодифицирован = Истина;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;				
			КонецЕсли;
						
			//	Движения и последовательности.
			Если БазовыйТипОбъекта = "Документ" Тогда
				
				//	Замены в движениях.
				Для Каждого Движение Из ОбъектМетаданных.Движения Цикл
					
					НаборЗаписей  = НаборыЗаписейДвижений[Движение.Имя];
					Если НаборЗаписей.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НаборМодифицирован = Ложь;
					
					//	Выгружаем колонки набора записей, которые содрежат тип заменяемой ссылки.
					СтрокаКолонокСодержащихТип = ПолучитьСтрокуКолонокСодержащихТип(НаборЗаписей.ВыгрузитьКолонки().Колонки, ТипЗнчСсылка);
					Если ПустаяСтрока(СтрокаКолонокСодержащихТип) Тогда
						Продолжить;
					КонецЕсли;
					
					//	Получим список общих реквизитов регистра.
					Отбор = Новый Структура("Метаданные", Движение);
					ОбщиеРеквизитыРегистра = ИспользованиеОбщихРеквизитов.Скопировать(Отбор, "Имя, Тип");
										
					//	Структура колонок для замены, выгружаем только эти колонки.
					СтруктураКолонок = Новый Структура(СтрокаКолонокСодержащихТип);
					
					ЭтоРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
					
					//	Для регистра бухгалтерии каждое субконто дополним видом субконто.
					Если ЭтоРегистрБухгалтерии И Движение.ПланСчетов <> Неопределено Тогда
						МаксКоличествоСубконто = Движение.ПланСчетов.МаксКоличествоСубконто;
						Если Движение.Корреспонденция Тогда
							Если СтруктураКолонок.Свойство("СубконтоДт1") Тогда
								Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
									СтруктураКолонок.Вставить("ВидСубконтоДт" + ИндексСубконто);
									СтруктураКолонок.Вставить("ВидСубконтоКт" + ИндексСубконто);
									СтрокаКолонокСодержащихТип = СтрокаКолонокСодержащихТип + ", ВидСубконтоДт" + ИндексСубконто + ", ВидСубконтоКт" + ИндексСубконто;
								КонецЦикла;
							КонецЕсли;
						Иначе
							Если СтруктураКолонок.Свойство("Субконто1") Тогда
								Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
									СтруктураКолонок.Вставить("ВидСубконто" + ИндексСубконто);
									СтрокаКолонокСодержащихТип = СтрокаКолонокСодержащихТип + ", ВидСубконто" + ИндексСубконто;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					Иначе
						МаксКоличествоСубконто = 0;
					КонецЕсли;					
					
					//	Получаем таблицу набора только с необходимыми полями.
					ТаблицаНабора = НаборЗаписей.Выгрузить(, СтрокаКолонокСодержащихТип);
					
					//	Замена в стандартных реквизитах регистров.
					Для Каждого СтандартныйРеквизит Из СтандартныеРеквизитыРегистров Цикл
						Если СтруктураКолонок.Свойство(СтандартныйРеквизит) Тогда
							ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, СтандартныйРеквизит, НаборМодифицирован);
						КонецЕсли;
					КонецЦикла;
					
					//	Замена в измерениях набора.
					Для Каждого Измерение Из Движение.Измерения Цикл
						Если ЭтоРегистрБухгалтерии И Не Измерение.Балансовый Тогда
							Если СтруктураКолонок.Свойство(Измерение.Имя + "Дт") Тогда							
								ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, Измерение.Имя + "Дт", НаборМодифицирован);
								ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, Измерение.Имя + "Кт", НаборМодифицирован);
							КонецЕсли;
						Иначе
							Если СтруктураКолонок.Свойство(Измерение.Имя) Тогда
								ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, Измерение.Имя, НаборМодифицирован);
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;
					
					//	Замена в ресурсах регистров сведений.
					Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
						Для Каждого Ресурс Из Движение.Ресурсы Цикл
							Если СтруктураКолонок.Свойство(Ресурс.Имя) Тогда
								ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, Ресурс.Имя, НаборМодифицирован);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					//	Замена в реквизитах регистра.
					Для Каждого Реквизит Из Движение.Реквизиты Цикл
						Если СтруктураКолонок.Свойство(Реквизит.Имя) Тогда
							ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, Реквизит.Имя, НаборМодифицирован);
						КонецЕсли;
					КонецЦикла;
					
					//	Замена в общих реквизитах регистра.
					Для Каждого ОбщийРеквизит Из ОбщиеРеквизитыРегистра Цикл
						Если СтруктураКолонок.Свойство(ОбщийРеквизит.Имя) Тогда
							ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, ОбщийРеквизит.Имя, НаборМодифицирован);
						КонецЕсли;
					КонецЦикла;
										
					//	Субконто и счета (регистров бухгалтерии).
					Если ЭтоРегистрБухгалтерии И Движение.ПланСчетов <> Неопределено Тогда
						
						//	Выполняем замены в полях субконто.
						Если Движение.Корреспонденция Тогда
							Если СтруктураКолонок.Свойство("СубконтоДт1") Тогда
								Для ИндексСубконто = 1 По Движение.ПланСчетов.МаксКоличествоСубконто Цикл
									ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, "СубконтоДт", НаборМодифицирован, Истина, ИндексСубконто);
									ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, "СубконтоКт", НаборМодифицирован, Истина, ИндексСубконто);
								КонецЦикла;
							КонецЕсли;
						Иначе
							Если СтруктураКолонок.Свойство("Субконто1") Тогда
								Для ИндексСубконто = 1 По Движение.ПланСчетов.МаксКоличествоСубконто Цикл
									ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, "Субконто", НаборМодифицирован, Истина, ИндексСубконто);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НаборМодифицирован Тогда
						НаборЗаписей.ДополнительныеСвойства.Вставить("НаборМодифицирован");
					КонецЕсли;
					
				КонецЦикла;
				
				//	Замены в последовательностях.
				Для Каждого ЭлементНабораЗаписей Из НаборыЗаписейПоследовательностей Цикл
					
					НаборЗаписей = ЭлементНабораЗаписей.Значение;
					Если НаборЗаписей.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
						
					НаборМодифицирован = Ложь;
					
					//	Выгружаем колонки набора записей, которые содрежат тип заменяемой ссылки.
					СтрокаКолонокСодержащихТип = ПолучитьСтрокуКолонокСодержащихТип(НаборЗаписей.ВыгрузитьКолонки().Колонки, ТипЗнчСсылка);
					Если ПустаяСтрока(СтрокаКолонокСодержащихТип) Тогда
						Продолжить;
					КонецЕсли;
					
					МетаданныеПоследовательности = НаборЗаписей.Метаданные();
					
					ТаблицаНабора = НаборЗаписей.Выгрузить(, СтрокаКолонокСодержащихТип);					
					
					//	Замена в измерениях набора.
					Для Каждого Измерение Из МетаданныеПоследовательности.Измерения Цикл
						Если СтруктураКолонок.Свойство(Измерение.Имя) Тогда
							ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, Измерение.Имя, НаборМодифицирован);
						КонецЕсли;
					КонецЦикла;
										
					Если НаборМодифицирован Тогда
						НаборЗаписей.ДополнительныеСвойства.Вставить("НаборМодифицирован");
					КонецЕсли;
						
				КонецЦикла;
				
			КонецЕсли;
						
		ИначеЕсли БазовыйТипОбъекта = "РегистрСведений" Тогда
		
			//	НЕЗАВИСИМЫЙ РЕГИСТР СВЕДЕНИЙ
			
			Если Объект.Количество() <> 0 Тогда
				ТаблицаНабора = Объект.Выгрузить();
				ЗаписьНабора = Объект[0];
				СтрокаНабора = ТаблицаНабора[0];
				Для Каждого Колонка Из ТаблицаНабора.Колонки Цикл
					Если СтрокаНабора[Колонка.Имя] = Ссылка Тогда
						
						ЗаписьНабора[Колонка.Имя] = ПравильнаяСсылка;
						
						Если ОбъектМетаданных.Измерения.Найти(Колонка.Имя) <> Неопределено Тогда
							Объект.Отбор[Колонка.Имя].Установить(ПравильнаяСсылка);
						КонецЕсли;
						
						ОбъектМодифицирован = Истина;

					КонецЕсли;				
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли БазовыйТипОбъекта = "Константа" Тогда
			
			//	МЕНЕДЖЕР ЗНАЧЕНИЯ
			
			Объект.Значение = ПравильнаяСсылка;
			
			ОбъектМодифицирован = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект <> Неопределено И ОбъектМодифицирован Тогда
		Объект.ДополнительныеСвойства.Вставить("ОбъектМодифицирован");
	КонецЕсли;
			
КонецПроцедуры


//	ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ ЗАМЕНЫ

//	Выполняет чтение данных объекта из базы данных.
//
Процедура ПрочитатьОбъектИзБазыДанных(
		Данные,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		Объект,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		КопияНабораЗаписейРегистраСведений, 
		ДополнительныеПараметры, 
		Отказ
	)
	
	Попытка
		
		ПрочитатьОбъектИзБазыДанных_Исключение(
			Данные,
			БазовыйТипОбъекта,
			ОбъектМетаданных,
			Объект,
			НаборыЗаписейДвижений,
			НаборыЗаписейПоследовательностей,
			КопияНабораЗаписейРегистраСведений
		)
	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВыполнитьВызовИсключения = (ДополнительныеПараметры.ВыполнятьВТранзакции = Истина);
		
		ОбработкаИсключения(
			"Прочитать объект из базы данных",
			ИнформацияОбОшибке,
			Данные,
			ОбъектМетаданных,
			ДополнительныеПараметры,
			ВыполнитьВызовИсключения,
			Отказ
		);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьОбъектИзБазыДанных_Исключение(
		Данные,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		Объект,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		КопияНабораЗаписейРегистраСведений
	)
	
	Если БазовыйТипОбъекта = "Документ"
		Или БазовыйТипОбъекта = "Справочник"
		Или БазовыйТипОбъекта = "ПланВидовХарактеристик"
		Или БазовыйТипОбъекта = "ПланСчетов"
		Или БазовыйТипОбъекта = "ПланВидовРасчета"
		Или БазовыйТипОбъекта = "Задача"
		Или БазовыйТипОбъекта = "БизнесПроцесс"
		Или БазовыйТипОбъекта = "ПланОбмена" Тогда
		
		//	Считываем объект из базы данных.
		Объект = Данные.ПолучитьОбъект();
		
		//	Есть движения с регистратором "битой ссылкой".
		ЭтоБитаяСсылкаДокумента = Объект = Неопределено И БазовыйТипОбъекта = "Документ";
		
		Если ЭтоБитаяСсылкаДокумента Тогда
			Объект = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
			Объект.ДополнительныеСвойства.Вставить("ЭтоБитаяСсылкаДокумента");
		Иначе
			Объект.Заблокировать();
		КонецЕсли;
		
		Если БазовыйТипОбъекта = "Документ" Тогда
			
			//	Считываем движения документа из базы данных.
			НаборыЗаписейДвижений = Новый Структура;
			Для Каждого Движение Из ОбъектМетаданных.Движения Цикл				
				
				НаборЗаписей = Объект.Движения[Движение.Имя];
				
				Если ЭтоБитаяСсылкаДокумента Тогда
					//	Получаем независимые от объекта наборы записей.
					НаборЗаписей.Отбор.Регистратор.Установить(Данные);
					КопияНабораЗаписей = ПолучитьКопиюНабораИзБазыДанных(НаборЗаписей);
					НаборыЗаписейДвижений.Вставить(Движение.Имя, КопияНабораЗаписей);
				Иначе
					НаборЗаписей.Прочитать();
					НаборыЗаписейДвижений.Вставить(Движение.Имя, НаборЗаписей);					
				КонецЕсли;
				
			КонецЦикла;
			
			//	Считываем записи последовательностей из базы данных.
			НаборыЗаписейПоследовательностей = Новый Структура;
			Для Каждого Последовательность Из Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(ОбъектМетаданных) Тогда					
					НаборЗаписей = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Данные);
					НаборЗаписей.Прочитать();
					НаборыЗаписейПоследовательностей.Вставить(Последовательность.Имя, НаборЗаписей);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	//	Чтение независимого регистра сведений.
	ИначеЕсли БазовыйТипОбъекта = "РегистрСведений" Тогда
		
		НаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		НаборЗаписейКопия = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			НаборЗаписей.Отбор[Измерение.Имя].Установить(Данные[Измерение.Имя]);
			НаборЗаписейКопия.Отбор[Измерение.Имя].Установить(Данные[Измерение.Имя]);
		КонецЦикла;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НаборЗаписей.Отбор["Период"].Установить(Данные.Период);
			НаборЗаписейКопия.Отбор["Период"].Установить(Данные.Период);
		КонецЕсли;
		
		//	Считываем объект из базы данных.
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписейКопия.Добавить(), Запись);
		КонецЦикла;
				
		Объект = НаборЗаписей;
		КопияНабораЗаписейРегистраСведений = НаборЗаписейКопия;

	ИначеЕсли БазовыйТипОбъекта = "Константа" Тогда
		Объект = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
	Иначе		
		ТекстИсключения = "Объект метаданных """ + ОбъектМетаданных.ПолноеИмя() + """ не обрабатывается для замены ссылок.";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
			
КонецПроцедуры

//	Выполняет запись объекта в базу данных после выполнения замен.
//
Процедура ЗаписатьОбъектВБазуДанных(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,		
		КопияНабораЗаписейРегистраСведений,
		ОбменДанными,
		ДополнительныеПараметры,
		Отказ
	)
	
	Попытка
		
		ЗаписатьОбъектВБазуДанных_Исключение(
			Данные,
			Объект,
			БазовыйТипОбъекта,
			ОбъектМетаданных,
			НаборыЗаписейДвижений,
			НаборыЗаписейПоследовательностей,
			КопияНабораЗаписейРегистраСведений,
			ОбменДанными
		);
		
	Исключение								
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВыполнитьВызовИсключения = (ДополнительныеПараметры.ВыполнятьВТранзакции = Истина);
		
		Если Не ДополнительныеПараметры.ВыполнятьВТранзакции Тогда
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаИсключения(
			"При записи объекта в базу данных",
			ИнформацияОбОшибке,
			Данные,
			ОбъектМетаданных,
			ДополнительныеПараметры,
			ВыполнитьВызовИсключения,
			Отказ
		);
		
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаписатьОбъектВБазуДанных_Исключение(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,		
		КопияНабораЗаписейРегистраСведений,
		ОбменДанными
	)
	
	Если БазовыйТипОбъекта = "Документ"
		Или БазовыйТипОбъекта = "Справочник"
		Или БазовыйТипОбъекта = "ПланВидовХарактеристик"
		Или БазовыйТипОбъекта = "ПланСчетов"
		Или БазовыйТипОбъекта = "ПланВидовРасчета"
		Или БазовыйТипОбъекта = "Задача"
		Или БазовыйТипОбъекта = "БизнесПроцесс"
		Или БазовыйТипОбъекта = "ПланОбмена" Тогда
		
		//	Запись ссылочного объекта.
		
		Если БазовыйТипОбъекта = "Документ" Тогда
			
			//	Запись движений в базу данных.
			Для Каждого ЭлементНабораЗаписей Из НаборыЗаписейДвижений Цикл
				НаборЗаписей = ЭлементНабораЗаписей.Значение;
				Если НаборЗаписей.ДополнительныеСвойства.Свойство("НаборМодифицирован") Тогда
					УстановитьПараметрыОбменаДанными(ОбменДанными, НаборЗаписей.ОбменДанными);
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;
			
			//	Запись последовательностей в базу данных.
			Для Каждого ЭлементНабораЗаписей Из НаборыЗаписейПоследовательностей Цикл
				НаборЗаписей = ЭлементНабораЗаписей.Значение; 
				Если НаборЗаписей.ДополнительныеСвойства.Свойство("НаборМодифицирован") Тогда
					УстановитьПараметрыОбменаДанными(ОбменДанными, НаборЗаписей.ОбменДанными);
					НаборЗаписей.Записать();
				КонецЕсли;					
			КонецЦикла;
			
		КонецЕсли;
		
		//	Записываем объект в базу данных.
		Если Не Объект.ДополнительныеСвойства.Свойство("ЭтоБитаяСсылкаДокумента")
			И Объект.ДополнительныеСвойства.Свойство("ОбъектМодифицирован") Тогда
			
			Если БазовыйТипОбъекта <> "ПланОбмена" Тогда
				УстановитьПараметрыОбменаДанными(ОбменДанными, Объект.ОбменДанными);
			КонецЕсли;
			
			Объект.Записать();
			
		КонецЕсли;
		
		Если Объект.Заблокирован() Тогда
			Объект.Разблокировать();
		КонецЕсли;
						
	ИначеЕсли БазовыйТипОбъекта = "РегистрСведений" Тогда				
		
		//	Запись независимого регистра сведений.
		
		УстановитьПараметрыОбменаДанными(ОбменДанными, Объект.ОбменДанными);
		УстановитьПараметрыОбменаДанными(ОбменДанными, КопияНабораЗаписейРегистраСведений.ОбменДанными);
		
		//	Для записи регистра сведений всегда открываем транзакцию.
		Если Не ТранзакцияАктивна() Тогда
			//	При возникновении исключения, транзакция будет во всяком случае отменена.
			НачатьТранзакцию();
		КонецЕсли;
		
		//	Очищаем старую запись в рег. сведений.
		КопияНабораЗаписейРегистраСведений.Очистить();
		КопияНабораЗаписейРегистраСведений.Записать();
		
		//	Записываем новый экземпляр объекта.
		Объект.Записать();
		
	ИначеЕсли БазовыйТипОбъекта = "Константа" Тогда
	
		//	Менеджер значения константы.
		
		УстановитьПараметрыОбменаДанными(ОбменДанными, Объект.ОбменДанными);
		Объект.Записать();
		
	КонецЕсли;
		
КонецПроцедуры

//	Выполнить замену в колонке набора записей по таблице набора
//
Процедура ВыполнитьЗаменуВКолонкеНабораЗаписей(ПравильнаяСсылка, Ссылка, НаборЗаписей, ТаблицаНабора, ИмяКолонки, НаборМодифицирован, ЭтоСубконто = Ложь, НомерСубконто = 0)
	
	Если Не ЭтоСубконто Тогда
		ИмяКолонкиТаблицы = ИмяКолонки;
		ИмяКолонкиНабора = ИмяКолонки;
	Иначе
		ИмяКолонкиТаблицы = ИмяКолонки + НомерСубконто;
		ИмяКолонкиВидаСубконто = "Вид" + ИмяКолонки + НомерСубконто;
		ИмяКолонкиНабора = ИмяКолонки;
	КонецЕсли;
	
	СтрокаЗаписи = ТаблицаНабора.Найти(Ссылка, ИмяКолонкиТаблицы);
	Пока СтрокаЗаписи <> Неопределено Цикл
		СтрокаЗаписи[ИмяКолонкиТаблицы] = ПравильнаяСсылка;
		Если Не ЭтоСубконто Тогда
			НаборЗаписей[ТаблицаНабора.Индекс(СтрокаЗаписи)][ИмяКолонкиНабора] = ПравильнаяСсылка;
		Иначе
			НаборЗаписей[ТаблицаНабора.Индекс(СтрокаЗаписи)][ИмяКолонкиНабора][СтрокаЗаписи[ИмяКолонкиВидаСубконто]] = ПравильнаяСсылка;
		КонецЕсли;
		НаборМодифицирован = Истина;
		СтрокаЗаписи = ТаблицаНабора.Найти(Ссылка, ИмяКолонкиТаблицы);
	КонецЦикла;
	
КонецПроцедуры

//	Установка параметров обмена данными объекта.
//	
//	Параметры:
//  	ОбменДанными (Структура): Загрузка (Булево), Отправитель (ПланОбменаСсылка), Получатели (Массив).
//
Процедура УстановитьПараметрыОбменаДанными(ПараметрыОбменаДанными, ОбменДанными)
	
	Если ПараметрыОбменаДанными = Неопределено Или ПараметрыОбменаДанными.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбменаДанными.Свойство("Загрузка") Тогда
		 ОбменДанными.Загрузка = ПараметрыОбменаДанными.Загрузка;
	КонецЕсли;
	
	Если ПараметрыОбменаДанными.Свойство("Отправитель") Тогда
		ОбменДанными.Отправитель = ПараметрыОбменаДанными.Отправитель;
	КонецЕсли;
		
	Если ПараметрыОбменаДанными.Свойство("Получатели") Тогда
		Для Каждого Получатель Из ПараметрыОбменаДанными.Получатели Цикл
			ОбменДанными.Получатели.Добавить(Получатель);
		КонецЦикла;		
	КонецЕсли;

КонецПроцедуры



/////////////////////////////////////////////////////////////////////////////////////
//	СЕРВИСНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

//	Получить массив уникальных значений колонки таблицы значений.
//
Функция ВыгрузитьУникальныеЗначенияКолонки(Таблица, Отбор = Неопределено, Колонка)
	Возврат ВыгрузитьУникальныеЗначенияКолонок(Таблица, Отбор, Колонка).ВыгрузитьКолонку(Колонка);
КонецФункции

//	Возвращает свернутую таблицу значений по указанным колонкам.
//
Функция ВыгрузитьУникальныеЗначенияКолонок(Таблица, Отбор = Неопределено, Колонки)
	Если Отбор = Неопределено Тогда
		НоваяТаблица = Таблица.Скопировать(, Колонки);
	Иначе
		НоваяТаблица = Таблица.Скопировать(Отбор, Колонки);
	КонецЕсли;
	НоваяТаблица.Свернуть(Колонки);
	Возврат НоваяТаблица;
КонецФункции

//	Получает табилцу использования общих реквизитов
//
Функция ТаблицаИспользованияОбщихРеквизитов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("Тип");
	Таблица.Колонки.Добавить("Метаданные");
	
	ИспользованиеОбщегоРеквизита_Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	ИспользованиеОбщегоРеквизита_Авто = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	АвтоИспользованиеОбщегоРеквизита_Использовать = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		
		АвтоИспользование_Использовать = (ОбщийРеквизит.АвтоИспользование = АвтоИспользованиеОбщегоРеквизита_Использовать);
		Для Каждого Элемент Из ОбщийРеквизит.Состав Цикл
			
			Если (Элемент.Использование = ИспользованиеОбщегоРеквизита_Использовать)
				Или (АвтоИспользование_Использовать
					И Элемент.Использование = ИспользованиеОбщегоРеквизита_Авто) Тогда
					
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.Имя = ОбщийРеквизит.Имя;
				НоваяСтрока.Тип = ОбщийРеквизит.Тип;
				НоваяСтрока.Метаданные = Элемент.Метаданные;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Таблица.Индексы.Добавить("Метаданные");
		
	Возврат Таблица;
	
КонецФункции

//	Возвращает строку колонок набора содержащих тип.
//
Функция ПолучитьСтрокуКолонокСодержащихТип(Колонки, Тип)
	
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип) Тогда
			МассивКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоединитьМассивСтрок(МассивКолонок, ", ");
	
КонецФункции

//	Возвращает строку полученную соединением строк из массива.
//
Функция СоединитьМассивСтрок(Массив, Разделитель = ", ")
	
	Количество = Массив.Количество();
	Если Количество > 0 Тогда
		
		Результат = Массив[0];
		
		Для НомерЭлемента = 2 По Количество Цикл
			Результат = Результат + Разделитель + Массив[НомерЭлемента - 1];
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

//	Возвращает копию набора записей из базы данных.
//
//	aakopylov@1cbit.ru, 22.04.2014.
//
Функция ПолучитьКопиюНабораИзБазыДанных(НаборЗаписей) Экспорт
	
	МенеджерРегистра = ПолучитьМенеджерПоОбъектуМетаданных(НаборЗаписей.Метаданные());
	
	НаборЗаписейИзБазыДанных = МенеджерРегистра.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			НаборЗаписейИзБазыДанных.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейИзБазыДанных.Прочитать();
	
	Возврат НаборЗаписейИзБазыДанных;
	
КонецФункции

//	Возвращает менеджер объекта по полному имени.
//
Функция ПолучитьМенеджерПоОбъектуМетаданных(ОбъектМетаданных)
	
	БазовыйТипОбъекта = ПолучитьБазовыйТипОбъекта(ОбъектМетаданных);
	
	Возврат ПолучитьМенеджерОбъектовБазовогоТипа(БазовыйТипОбъекта)[ОбъектМетаданных.Имя];
	
КонецФункции

//	Возвращает менеджер объектов базового типа по значению базового типа объекта.
//
Функция ПолучитьМенеджерОбъектовБазовогоТипа(БазовыйТипОбъекта)
	
	Если БазовыйТипОбъекта = "Справочник" Тогда
		Возврат Справочники;
	ИначеЕсли БазовыйТипОбъекта = "Документ" Тогда
		Возврат Документы;
	ИначеЕсли БазовыйТипОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат ПланыВидовХарактеристик;
	ИначеЕсли БазовыйТипОбъекта = "ПланСчетов" Тогда
		Возврат ПланыСчетов;
	ИначеЕсли БазовыйТипОбъекта = "ПланВидовРасчета" Тогда
		Возврат ПланыВидовРасчета;
	ИначеЕсли БазовыйТипОбъекта = "РегистрСведений" Тогда
		Возврат РегистрыСведений;
	ИначеЕсли БазовыйТипОбъекта = "РегистрНакопления" Тогда
		Возврат РегистрыНакопления;
	ИначеЕсли БазовыйТипОбъекта = "РегистрБухгалтерии" Тогда
		Возврат РегистрыБухгалтерии;
	ИначеЕсли БазовыйТипОбъекта = "РегистрРасчета" Тогда
		Возврат РегистрыРасчета;
	ИначеЕсли БазовыйТипОбъекта = "БизнесПроцесс" Тогда
		Возврат БизнесПроцессы;
	ИначеЕсли БазовыйТипОбъекта = "Задача" Тогда
		Возврат Задачи;
	ИначеЕсли БазовыйТипОбъекта = "ПланОбмена" Тогда
		Возврат ПланыОбмена;
	ИначеЕсли БазовыйТипОбъекта = "Перечисление" Тогда
		Возврат Перечисления;
	КонецЕсли;
	
КонецФункции

//	Возвращает имя базового типа объекта метаданных ("Справочник", "Документ", ...).
//
Функция ПолучитьБазовыйТипОбъекта(ОбъектМетаданных)
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Возврат Лев(ПолноеИмя, Найти(ПолноеИмя, ".") - 1);
КонецФункции


//	СООБЩЕНИЯ, ОШИБКИ, ИСКЛЮЧЕНИЯ

//	Проверка необходимости прерывания выполнения обработки замены при возникновении исключения.
//
Процедура ОбработкаИсключения(
		ПредставлениеОбработчика = Неопределено,
		ИнформацияОбОшибке = Неопределено,
		Данные = Неопределено,
		ОбъектМетаданных = Неопределено,
		ДополнительныеПараметры = Неопределено,
		ВыполнитьВызовИсключения = Ложь, 
		Отказ = Ложь
	)
	
	МассивСтрок = Новый Массив;
	
	Если ПредставлениеОбработчика <> Неопределено Тогда
		ТекстСтроки = "Ошибка при замене ссылок: [ПредставлениеОбработчика]";
		МассивСтрок.Добавить(СтрЗаменить(ТекстСтроки, "[ПредставлениеОбработчика]", ПредставлениеОбработчика));
	КонецЕсли;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		ТекстСтроки = "Объект метаданных: [ОбъектМетаданных]";
		МассивСтрок.Добавить(СтрЗаменить(ТекстСтроки, "[ОбъектМетаданных]", ОбъектМетаданных));
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		ТекстСтроки = "Объект: [Объект]";
		МассивСтрок.Добавить(СтрЗаменить(ТекстСтроки, "[Объект]", Данные));
	КонецЕсли;
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ТекстСтроки = "Описание ошибки: [ОписаниеОшибки]";
		МассивСтрок.Добавить(СтрЗаменить(ТекстСтроки, "[ОписаниеОшибки]", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
	КонецЕсли;
	
	ТекстОшибки = СоединитьМассивСтрок(МассивСтрок, Символы.ПС);
	
	СообщитьОбОшибке(ТекстОшибки, Отказ, , , Данные, ОбъектМетаданных);
	
	//	Добавляем информацию в таблицу исключений.
	ОписаниеИсключения = ДополнительныеПараметры.ТаблицаИсключений.Добавить();
	ОписаниеИсключения.Данные = Данные;
	ОписаниеИсключения.ОписаниеОшибки = ТекстОшибки;
	
	//	Заполняем параметр с описанием последней ошибки.
	ДополнительныеПараметры.ОписаниеПоследнейОшибки = ТекстОшибки;
	
	//	Устанавливаем флаг о наличии исключений.
	ДополнительныеПараметры.БылиИсключения = Истина;
	
	//	Закрываем открытую транзакцию.
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Если ВыполнитьВызовИсключения Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
КонецПроцедуры

//	Сообщаем об ошибке пользователю и записываем данные в журнал.
//
Функция СообщитьОбОшибке(
		ТекстСообщения,
		Отказ = Ложь,
		Заголовок = "",
		ЗаписатьВЖурналРегистрации = Истина,
		Данные = Неопределено,
		ОбъектМетаданных = Неопределено
	) Экспорт
	
	Отказ = Истина;	
	
	СообщитьОДействии("Ошибка", ТекстСообщения, Заголовок, СтатусСообщения.ОченьВажное, ЗаписатьВЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, Данные, ОбъектМетаданных);
	
КонецФункции

//	Сообщаем о выполнении какого-либо действия пользователю и записываем данные в журнал.
//
Функция СообщитьОДействии(
		Действие,
		ТекстСообщения = "",
		Заголовок = "",
		СтатусСообщенияПользователю = Неопределено,
		ЗаписатьВЖурналРегистрации = Истина,
		УровеньЗаписиЖурналаРегистрации = Неопределено,
		Данные = Неопределено,
		ОбъектМетаданных = Неопределено
	) Экспорт
	
	МассивСтрокСообщения = Новый Массив;
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		МассивСтрокСообщения.Добавить(Заголовок);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		МассивСтрокСообщения.Добавить(ТекстСообщения);
	КонецЕсли;
	
	ПолныйТекстСообщения = СоединитьМассивСтрок(МассивСтрокСообщения, Символы.ПС);
	
	//	Сообщение пользователю.
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ПолныйТекстСообщения;
	Сообщение.Сообщить();
	
	//	Журнал регистрации.
	Если ЗаписатьВЖурналРегистрации Тогда
		
		Если УровеньЗаписиЖурналаРегистрации = Неопределено Тогда
			УровеньЗаписиЖурналаРегистрации = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			"Замена ссылочных элементов." + Действие,
			УровеньЗаписиЖурналаРегистрации,
			ОбъектМетаданных,
			Данные,
			ПолныйТекстСообщения
		);
		
	КонецЕсли;
	
КонецФункции


//	ВЕРСИОНИРОВАНИЕ

//	Версия модуля замены.
//
Функция Версия() Экспорт
	Возврат "2.3.1.3";
КонецФункции

//	Дата версии модуля замены.
//
Функция ДатаВерсии() Экспорт
	Возврат '20141201';
КонецФункции



/////////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ ВЫЗОВА ПЕРЕОПРЕДЕЛЯЕМЫХ ОБРАБОТЧИКОВ СОБЫТИЙ

//	Вызвается после инициализации обязательных дополнительных параметров;
//	вызывается дважды: на клиенте и на сервере; вне фонового задания и
//	в контексте фонового задания.
//
Процедура ОбработчикСобытия_ИнициализацияДополнительныхПараметров(ДополнительныеПараметры)
	
	ПереопределяемыйИнициализацияДополнительныхПараметров(ДополнительныеПараметры);
	
	Попытка
		
		Если ДополнительныеПараметры.ЕстьОбработчикИнициализацияДополнительныхПараметров Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикИнициализацияДополнительныхПараметров);
		КонецЕсли;
		
	Исключение
		
		ОбработкаИсключения(
			"Инициализация дополнительных параметров",
			ИнформацияОбОшибке(), , ,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
	
КонецПроцедуры

//	Обработчик вызывается после инициализации дополнительных параметров,
//	перед началом выполнения замен по таблице замен и перед открытием
//	транзакции.
//
Процедура ОбработчикСобытия_ПередВыполнениемЗаменыЭлементов(ТаблицаЗамен, ДополнительныеПараметры)
	
	ПереопределяемыйПередВыполнениемЗаменыЭлементов(ТаблицаЗамен, ДополнительныеПараметры);
	
	Попытка
	
		Если ДополнительныеПараметры.ЕстьОбработчикПередВыполнениемЗаменыЭлементов Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПередВыполнениемЗаменыЭлементов);
		КонецЕсли;
		
	Исключение
		
		ОбработкаИсключения(
			"Перед выполнением замены элементов",
			ИнформацияОбОшибке(), , ,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
	
КонецПроцедуры

//	Вызывается перед получением объекта из базы данных для вполнения замен.
//
Процедура ОбработчикСобытия_ПередПолучениемОбъектаИзБазыДанных(
		Данные,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		КоличествоДанныхСЗаменами,
		СчетчикОбработанныхДанных,
		ДополнительныеПараметры,
		Отказ
	)
	
	ПереопределяемыйПередПолучениемОбъектаИзБазыДанных(
		Данные,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		КоличествоДанныхСЗаменами,
		СчетчикОбработанныхДанных,
		ДополнительныеПараметры,
		Отказ
	);
	
	
	Попытка
	
		Если ДополнительныеПараметры.ЕстьОбработчикПередПолучениемОбъектаИзБазыДанных Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПередПолучениемОбъектаИзБазыДанных);
		КонецЕсли;
			
	Исключение
		
		ОбработкаИсключения(
			"Перед получением объекта из базы данных",
			ИнформацияОбОшибке(),
			Данные,
			ОбъектМетаданных,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
	
КонецПроцедуры

//	Вызывается перед выполнением замены в объекте неправильных ссылок
//	на одну правильную ссылку.
//
Процедура ОбработчикСобытия_ПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		ОбщиеРеквизитыОбъекта,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		ПравильнаяСсылка,
		НеправильныеСсылки,
		ДополнительныеПараметры,
		Отказ
	)
	
	//ПереопределяемыйПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте(
	//	Данные,
	//	Объект,
	//	БазовыйТипОбъекта,
	//	ОбъектМетаданных,
	//	ОбщиеРеквизитыОбъекта,
	//	НаборыЗаписейДвижений,
	//	НаборыЗаписейПоследовательностей,
	//	ПравильнаяСсылка,
	//	НеправильныеСсылки,
	//	ДополнительныеПараметры,
	//	Отказ
	//);
	
	Попытка
	
		Если ДополнительныеПараметры.ЕстьОбработчикПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПередВыполнениемЗаменыНаПравильнуюСсылкуВОбъекте);
		КонецЕсли;
			
	Исключение
		
		ОбработкаИсключения(
			"Перед выполнением замены на правильную ссылку в объекте",
			ИнформацияОбОшибке(),
			Данные,
			ОбъектМетаданных,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
	
КонецПроцедуры

//	Вызывается перед выполнением замены в объекте неправильной ссылки
//	на правильную ссылку.
//
Процедура ОбработчикСобытия_ПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		ОбщиеРеквизитыОбъекта,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		ПравильнаяСсылка,
		НеправильнаяСсылка,
		ДополнительныеПараметры,
		Отказ
	)
	
	//ПереопределяемыйПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте(
	//	Данные,
	//	Объект,
	//	БазовыйТипОбъекта,
	//	ОбъектМетаданных,
	//	ОбщиеРеквизитыОбъекта,
	//	НаборыЗаписейДвижений,
	//	НаборыЗаписейПоследовательностей,
	//	ПравильнаяСсылка,
	//	НеправильнаяСсылка,
	//	ДополнительныеПараметры,
	//	Отказ
	//);
	
	Попытка
	
		Если ДополнительныеПараметры.ЕстьОбработчикПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПередВыполнениемЗаменыНеправильнойСсылкиВОбъекте);
		КонецЕсли;
			
	Исключение
		
		ОбработкаИсключения(
			"Перед выполнением замены неправильной ссылки в объекте",
			ИнформацияОбОшибке(),
			Данные,
			ОбъектМетаданных,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
	
КонецПроцедуры

//	Вызывается перед записью объекта в базу данных после того,
//	как выполнена замена всех ссылок в объекте на правильные.
//
Процедура ОбработчикСобытия_ПередЗаписьюОбъектаВБазуДанных(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		КопияНабораЗаписейРегистраСведений,
		ОбменДанными,
		ДополнительныеПараметры,
		Отказ
	)
	
	ПереопределяемыйПередЗаписьюОбъектаВБазуДанных(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		КопияНабораЗаписейРегистраСведений,
		ОбменДанными,
		ДополнительныеПараметры,
		Отказ
	);
	
	Попытка
	
		Если ДополнительныеПараметры.ЕстьОбработчикПередЗаписьюОбъектаВБазуДанных Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПередЗаписьюОбъектаВБазуДанных);
		КонецЕсли;
			
	Исключение
		
		ОбработкаИсключения(
			"Перед записью объекта в базу данных",
			ИнформацияОбОшибке(),
			Данные,
			ОбъектМетаданных,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
		
КонецПроцедуры

//	Обработчик вызывается после выполнения всех замен по таблице замен
//	и после закрытия транзакции.
//
Процедура ОбработчикСобытия_ПослеВыполненияЗаменыЭлементов(ДополнительныеПараметры)

	ПереопределяемыйПослеВыполненияЗаменыЭлементов(ДополнительныеПараметры);
	
	Попытка
		
		Если ДополнительныеПараметры.ЕстьОбработчикПослеВыполненияЗаменыЭлементов Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПослеВыполненияЗаменыЭлементов);
		КонецЕсли;
		
	Исключение
		
		ОбработкаИсключения(
			"После выполнения замены элементов",
			ИнформацияОбОшибке(), , ,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
		
КонецПроцедуры

//	Обработчик взывается перед чтением сообщения фонового задания, которое
//	было выполненно на сервере в контексте фонового заданения.
//
Процедура ОбработчикСобытия_ПередЧтениемСообщенияФоновогоЗаданияЗамены(Сообщение, ФоновоеЗадание, ДополнительныеПараметры, Отказ)
	
	//ОбщийМодульПереопределяемый().ПередЧтениемСообщенияФоновогоЗаданияЗамены(Сообщение, ФоновоеЗадание, ДополнительныеПараметры, Отказ);
	
	Попытка
		
		Если ДополнительныеПараметры.ЕстьОбработчикПередЧтениемСообщенияФоновогоЗаданияЗамены Тогда
			Выполнить(ДополнительныеПараметры.ОбработчикПередЧтениемСообщенияФоновогоЗаданияЗамены);
		КонецЕсли;
		
	Исключение
		
		ОбработкаИсключения(
			"Перед чтением сообщения фонового задания замены",
			ИнформацияОбОшибке(), , ,
			ДополнительныеПараметры,
			Истина
		);
		
	КонецПопытки;
	
КонецПроцедуры


//	}ЗАМЕНА ССЫЛОК В ОБЪЕКТАХ БАЗЫ ДАННЫХ
/////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////
//	ПЕРЕОПРЕДЕЛЯЕМЫЕ ОБРАБОТЧИКИ СОБЫТИЙ ЗАМЕНЫ ССЫЛОК

Процедура ПереопределяемыйИнициализацияДополнительныхПараметров(ДополнительныеПараметры)
	
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ОтключитьКонтрольЗаписи", Истина, "Булево");
	ИнициализироватьДопПараметр(ДополнительныеПараметры.ОбменДанными, "Загрузка", ДополнительныеПараметры.ОтключитьКонтрольЗаписи, "Булево");
	
	//	Период вывода состояния замены элементов в журнал регистрации в секундах (по умолчению 600 сек = 10 мин.).
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ПериодВыводаСостоянияЗаменыВЖурналРегистрации", 600, "Число");
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ВремяПоследнегоВыводаСостоянияЗаменыВЖурналРегистрации", ТекущаяДата(), "Дата");
	
	//	Прерывание обработки замены при накоплении определенного количества исключений.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "КоличествоИсключенийДляПрерыванияЗамены", 0, "Число");
	
	Если Не мОбщиеМодулиЗаменыСсылочныхЭлементовДоступны Тогда
		
		ДополнительныеПараметры.ВыполнятьНаСервере = Ложь;
		ДополнительныеПараметры.ВыполнятьКакФоновоеЗадание = Ложь;
		
		#Если Не Сервер Тогда
			ДополнительныеПараметры.ВыполнятьПодПолнымиПравами = Ложь;
		#КонецЕсли

	КонецЕсли;
		
КонецПроцедуры

Процедура ПереопределяемыйПередВыполнениемЗаменыЭлементов(ТаблицаЗамен, ДополнительныеПараметры)
		
	//	Использование индикатора.
	
	//	Индикатор можеть быть создан вне обработки замены.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "Индикатор", Неопределено);
			
	#Если Клиент Тогда
	//	На клиенте всегда используем индикатор по умолчанию, если не установлен параметр иначе.
	ИнициализироватьДопПараметр(ДополнительныеПараметры, "ИспользоватьИндикатор", Истина, "Булево");
	#Иначе
	//	Для фонового задания используем по умолчанию индикатор, когда созаден объект в параметре индикатор.
	Если ДополнительныеПараметры.ВыполнятьКакФоновоеЗадание Тогда
		ИнициализироватьДопПараметр(ДополнительныеПараметры, "ИспользоватьИндикатор", ДополнительныеПараметры.Индикатор <> Неопределено, "Булево");
	Иначе
		//	На сервере вне фонового задания не используем индикатор никогда.
		ДополнительныеПараметры.Вставить("ИспользоватьИндикатор", Ложь);
	КонецЕсли;
	#КонецЕсли

	//	Создаем индикатор, если флаг "ИспользоватьИндикатор" = Истина, но объект индикатора не существует.
	Если ДополнительныеПараметры.ИспользоватьИндикатор И ДополнительныеПараметры.Индикатор = Неопределено Тогда
		
		//	Устанавливаем доп параметры индикатора.
		ДополнительныеПараметрыИндикатора = Новый Структура;
		ДополнительныеПараметрыИндикатора.Вставить("КоличествоОбновленийИндикатораНаОдинПроцент", 4);
		
		//	Создаем структуру индикатора.
		ДополнительныеПараметры.Индикатор = СоздатьИндикатор(
			"Замена ссылочных элементов",
			"Обрабатываемые метаданные...",
			,
			ДополнительныеПараметры.КлючФоновогоЗадания,
			ДополнительныеПараметрыИндикатора
		);
		
		//	На клиенте открываем форму индикатора.
		#Если Клиент Тогда
		ОткрытьФормуИндикатора(ДополнительныеПараметры.Индикатор);
		#КонецЕсли
	
	КонецЕсли;

КонецПроцедуры

Процедура ПереопределяемыйПередПолучениемОбъектаИзБазыДанных(
		Данные,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		КоличествоДанныхСЗаменами,
		СчетчикОбработанныхДанных,
		ДополнительныеПараметры,
		Отказ
	)
	
	//	Количество ошибок.
	КоличествоИсключений = ДополнительныеПараметры.ТаблицаИсключений.Количество();
	
	//	Прерывание обработки замены при накоплении определенного количества исключений.
	Если ЗначениеЗаполнено(ДополнительныеПараметры.КоличествоИсключенийДляПрерыванияЗамены)
		И КоличествоИсключений > ДополнительныеПараметры.КоличествоИсключенийДляПрерыванияЗамены Тогда
		ДополнительныеПараметры.ПрерватьВыполнениеЗамены = Истина;
	КонецЕсли;
		
	//	Обновляем индикатор.
	Если ЗначениеЗаполнено(КоличествоДанныхСЗаменами) И ДополнительныеПараметры.ИспользоватьИндикатор И ДополнительныеПараметры.Индикатор <> Неопределено Тогда
		ОбновитьИндикатор(
			ДополнительныеПараметры.Индикатор,
			100 * СчетчикОбработанныхДанных / КоличествоДанныхСЗаменами,
			"Обработано " + СчетчикОбработанныхДанных + " из " + КоличествоДанныхСЗаменами + ?(КоличествоИсключений <> 0, ", с ошибками " + КоличествоИсключений, ""),
			БазовыйТипОбъекта + ", " + ОбъектМетаданных.Имя
		);
	КонецЕсли;
	
	//	Запись в журнал регистрации о состоянии замены.
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПериодВыводаСостоянияЗаменыВЖурналРегистрации) Тогда
		Если ТекущаяДата() - ДополнительныеПараметры.ВремяПоследнегоВыводаСостоянияЗаменыВЖурналРегистрации
			> ДополнительныеПараметры.ПериодВыводаСостоянияЗаменыВЖурналРегистрации Тогда
			
			ПроцентВыполнения = ?(ЗначениеЗаполнено(КоличествоДанныхСЗаменами), Окр(100 * СчетчикОбработанныхДанных / КоличествоДанныхСЗаменами, 2), 0);
				
			ЗаписьЖурналаРегистрации(
				"Замена ссылочных элементов.СостояниеЗамены",
				УровеньЖурналаРегистрации.Информация,
				ОбъектМетаданных,
				Данные,
				"Выполнение замен в объектах: " + СчетчикОбработанныхДанных + " из " + КоличествоДанныхСЗаменами + " (" + Формат(ПроцентВыполнения, "ЧДЦ=2") + "%), с ошибками " + КоличествоИсключений + "."
			);
			
			ДополнительныеПараметры.ВремяПоследнегоВыводаСостоянияЗаменыВЖурналРегистрации = ТекущаяДата();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереопределяемыйПередЗаписьюОбъектаВБазуДанных(
		Данные,
		Объект,
		БазовыйТипОбъекта,
		ОбъектМетаданных,
		НаборыЗаписейДвижений,
		НаборыЗаписейПоследовательностей,
		КопияНабораЗаписейРегистраСведений,
		ОбменДанными,
		ДополнительныеПараметры,
		Отказ
	)
	
	#Если Клиент Тогда
	Состояние("Запись объекта: " + Формат(Объект) + ".");
	#КонецЕсли
	
	Если БазовыйТипОбъекта = "Документ" Тогда
		Для Каждого Движение Из ОбъектМетаданных.Движения Цикл
			НаборЗаписей = НаборыЗаписейДвижений[Движение.Имя];
			Если НаборЗаписей.Модифицированность() И Метаданные.РегистрыСведений.Содержит(Движение) Тогда
				ПередЗаписьюНабораЗаписейРегистраСведений(НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереопределяемыйПослеВыполненияЗаменыЭлементов(ДополнительныеПараметры)
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли

	//	Удаляем индикатор после выполнения всех замен.
	Если ДополнительныеПараметры.ИспользоватьИндикатор И ДополнительныеПараметры.Индикатор <> Неопределено Тогда
		УдалитьИндикатор(ДополнительныеПараметры.Индикатор);
	КонецЕсли;

КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
//	ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//	Обработка регистров сведений перед записью.
//
Функция ПередЗаписьюНабораЗаписейРегистраСведений(НаборЗаписей)
	
	МетаданныеНабора = НаборЗаписей.Метаданные();
	Если Метаданные.Имя = "БухгалтерияПредприятия"
		И (МетаданныеНабора.Имя = "РасчетСписанияКосвенныхРасходов"
			Или МетаданныеНабора.Имя = "РасчетРаспределенияКосвенныхРасходов"
			Или МетаданныеНабора.Имя = "РасчетСебестоимостиПродукции"
			Или МетаданныеНабора.Имя = "РасчетНормированияРасходов") Тогда
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		
		СтрокаИзмерений = "";
		Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл
			СтрокаИзмерений = СтрокаИзмерений + ", " + Измерение.Имя;
		КонецЦикла;
		СтрокаИзмерений = Сред(СтрокаИзмерений, 3);
		
		СтрокаРесурсов = "";
		Для Каждого Ресурс Из МетаданныеНабора.Ресурсы Цикл
			СтрокаРесурсов = СтрокаРесурсов + ", " + Ресурс.Имя;
		КонецЦикла;
		СтрокаРесурсов = Сред(СтрокаРесурсов, 3);
		
		ТаблицаНабора.Свернуть("Регистратор, " + СтрокаИзмерений, СтрокаРесурсов);
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
	
	КонецЕсли;
		
КонецФункции





/////////////////////////////////////////////////////////////////////////////////////
//	{РАБОТА С ИНДИКАТОРОМ ХОДА ВЫПОЛНЕНИЯ



/////////////////////////////////////////////////////////////////////////////////////
//	ОСНОВНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ИНДИКАТОРОМ

//	КЛИЕНТ / СЕРВЕР

//	Создает структуру индикатора выполнения, которая будет использоваться в остальных процедурах.
//
Функция СоздатьИндикатор(Наименование, Комментарий, МаксимальноеЗначение = 100, Ключ = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Индикатор = Новый Структура;
	
	///////////////////////////////////////////////
	//	ДОПОЛНИТЕЛЬНЫЕ ПАРАМЕТРЫ ИНДИКАТОРА
			
	//	Шап автомтического увеличения индикатора (т.е. когда не указано значение при обновлении).
	УстановитьДопПараметр(Индикатор, ДополнительныеПараметры, "Шаг", 1);
	
	//	Минимальное относительное изменение значения индикатора для обнолвения формы.
	УстановитьДопПараметр(Индикатор, ДополнительныеПараметры, "КоличествоОбновленийИндикатораНаОдинПроцент", 1);
		
	//	Минимальная частота обновления формы.
	УстановитьДопПараметр(Индикатор, ДополнительныеПараметры, "ЧастотаОбновленияФормыВСекундах", 1);		
	
	//	ВНИМАНИЕ!!! Нельзя инциализировать параметры структуры "Клиент", если индикатор может быть передан на сервер.
	//	либо перед передачей на сервер нужно делать копию структуры "Индикатор" без поля "Клиент".
	Индикатор.Вставить("Клиент", Новый Структура);
	
	//	Можно инициализировать переменную с фоновым заданием, которая будет использоваться при открытии формы.
	УстановитьДопПараметр(Индикатор.Клиент, ДополнительныеПараметры, "ФоновоеЗадание");
	
	//	Можно инициализировать переменную с владельцем формы, которая будет использоваться при открытии формы.
	УстановитьДопПараметр(Индикатор.Клиент, ДополнительныеПараметры, "ВладелецФормы");
	
	//	Можно задать имя метода обработчика обновления индикатора фонового задания.
	УстановитьДопПараметр(Индикатор.Клиент, ДополнительныеПараметры, "ОбработчикОбновленияИндикатораФоновогоЗадания");
	
	//	Имя общей формы, которая будет использоваться в качестве индикатора.
	УстановитьДопПараметр(Индикатор.Клиент, ДополнительныеПараметры, "ИмяОбщейФормы", "ХодВыполненияОбработкиДанных");
	
	Если Индикатор.Клиент.ФоновоеЗадание <> Неопределено Тогда
		УстановитьДопПараметр(Индикатор, ДополнительныеПараметры, "УникальныйИдентификатор", Индикатор.Клиент.ФоновоеЗадание.УникальныйИдентификатор);
		Если ЗначениеЗаполнено(Индикатор.Клиент.ФоновоеЗадание.Ключ) И Не ЗначениеЗаполнено(Ключ) Тогда
			Индикатор.Вставить("Ключ", Индикатор.Клиент.ФоновоеЗадание.Ключ);
		Иначе
			Индикатор.Вставить("Ключ", Ключ);
		КонецЕсли;
	Иначе
		УстановитьДопПараметр(Индикатор, ДополнительныеПараметры, "УникальныйИдентификатор", Новый УникальныйИдентификатор);
		Индикатор.Вставить("Ключ", Ключ);
	КонецЕсли;		
	
	Индикатор.Вставить("НаименованиеОбработкиДанных", Наименование);
	Индикатор.Вставить("КомментарийОбработкиДанных", Комментарий);
	Индикатор.Вставить("МаксимальноеЗначение", МаксимальноеЗначение);
	Индикатор.Вставить("КомментарийЗначения", "");
	Индикатор.Вставить("Значение", 0);
	Индикатор.Вставить("ЗначениеФормы", 0);
	
	///////////////////////////////////////////////
	//	СЕРВИСНЫЕ ПАРАМЕТРЫ ИНДИКАТОРА
	
	//	Коэффициент расчета относительного изменения значения индикатора.
	Индикатор.Вставить("МинимальноеИзменениеИндикатораДляОбновленияФормы", Макс(0.01 * МаксимальноеЗначение, 1));
	//	Переменная для хранения времени последнего обновления формы.
	Индикатор.Вставить("ВремяПоследнегоОбновленияФормы", Дата(1, 1, 1));		
	//	Используется для вызова удаления (закрытия) индикатора с сервера.
	Индикатор.Вставить("Удалить", Ложь);
	
	Возврат Индикатор;
	
КонецФункции

//	Обновляет индикатор выполняет обновление формы, если выполняется на клиенете.
//
Процедура ОбновитьИндикатор(Индикатор, Значение = Неопределено, Комментарий = Неопределено, КомментарийОбработки = Неопределено, Форма = Неопределено, ОбновитьФормуБезусловно = Ложь) Экспорт

	Если Индикатор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда
		//	Если используется фоновое задание, значит обновление данных индикатора происходить на сервере.
		Если Не ОбновитьФормуБезусловно И Индикатор.Клиент.ФоновоеЗадание <> Неопределено Тогда
			Сообщения = Индикатор.Клиент.ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
			Если Сообщения <> Неопределено И Сообщения.Количество() > 0 Тогда
				Сообщение = Сообщения[Сообщения.Количество() - 1];
				Попытка
					//	Распаковыеваем данные индикатора и текста сообщения.
					ИндикаторССервера = ЗначениеИзСтрокиВнутр(Сообщение.Текст).Получить();
					ЗаполнитьЗначенияСвойств(Индикатор, ИндикаторССервера, , "УникальныйИдентификатор, Клиент");
					Если Индикатор.Удалить Тогда
						УдалитьИндикатор(Индикатор, Форма);
					Иначе
						ОбновитьФормуИндикатора(Индикатор, Форма);
					КонецЕсли;					
				Исключение
				КонецПопытки
			КонецЕсли;
		Иначе
			//	Обновление данных и формы индикатора проводится на клиенте.
			ОбновитьФорму = ОбновитьДанныеИндикатора(Индикатор, Значение, Комментарий, КомментарийОбработки);
			Если ОбновитьФорму Или ОбновитьФормуБезусловно Тогда
				ОбновитьФормуИндикатора(Индикатор, Форма);
			КонецЕсли;
		КонецЕсли;		
	#Иначе		
		//	Отправляем с сервера сообщение о необходимости обновления формы на клиенте.
		ОбновитьФорму = ОбновитьДанныеИндикатора(Индикатор, Значение, Комментарий, КомментарийОбработки);
		Если ОбновитьФорму Тогда
			ОтправитьИндикаторНаКлиент(Индикатор);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

//	Удаление индикатора.
//	
Процедура УдалитьИндикатор(Индикатор, Форма = Неопределено) Экспорт
	
	Если Индикатор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда
		ЗакрытьФормуИндикатора(Индикатор, Форма);
		Индикатор = Неопределено;
	#Иначе		
		//	Отправляем с сервера сообщение о необходимости удаления индикатора.
		Индикатор.Удалить = Истина;
		ОтправитьИндикаторНаКлиент(Индикатор);
		Индикатор = Неопределено;
	#КонецЕсли	
	
КонецПроцедуры

//	КЛИЕНТ

#Если Клиент Тогда
	
//	Открывает и возвращает форму индикатора.
//
Функция ОткрытьФормуИндикатора(Индикатор, ВладелецФормы = Неопределено, Форма = Неопределено, ФоновоеЗадание = Неопределено, ОбработчикОбновленияИндикатораФоновогоЗадания = Неопределено) Экспорт
	
	Если Индикатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ВладелецФормы <> Неопределено Тогда
		Индикатор.Клиент.ВладелецФормы = ВладелецФормы;
	КонецЕсли;
	
	Если Форма = Неопределено Тогда
		Форма = ПолучитьФормуИндикатора(Индикатор);
		Если Форма = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Форма.НаименованиеОбработкиДанных = Индикатор.НаименованиеОбработкиДанных;
	Форма.КомментарийОбработкиДанных = Индикатор.КомментарийОбработкиДанных;
	Форма.МаксимальноеЗначение = Индикатор.МаксимальноеЗначение * Индикатор.КоличествоОбновленийИндикатораНаОдинПроцент;
	Форма.КомментарийЗначения = Индикатор.КомментарийЗначения;
	Форма.Значение = Индикатор.Значение;
		
	Если Не Форма.Открыта() Тогда
		
		Форма.Открыть();
	
		Если ФоновоеЗадание <> Неопределено Тогда
			Индикатор.Клиент.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		КонецЕсли;
		
		Если ОбработчикОбновленияИндикатораФоновогоЗадания <> Неопределено Тогда
			Индикатор.Клиент.Вставить("ОбработчикОбновленияИндикатораФоновогоЗадания", ОбработчикОбновленияИндикатораФоновогоЗадания);
		КонецЕсли;
		
		Если Индикатор.Клиент.ФоновоеЗадание <> Неопределено Тогда
			
			Если Индикатор.Клиент.ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда			
				Если Индикатор.Клиент.ОбработчикОбновленияИндикатораФоновогоЗадания <> Неопределено Тогда		
					Если Форма.ВладелецФормы <> Неопределено И ТипЗнч(Форма.ВладелецФормы) = Тип("Форма") Тогда
						Форма.ВладелецФормы.ПодключитьОбработчикОжидания(Индикатор.Клиент.ОбработчикОбновленияИндикатораФоновогоЗадания, Индикатор.ЧастотаОбновленияФормыВСекундах);
					Иначе
						ПодключитьОбработчикОжидания(Индикатор.Клиент.ОбработчикОбновленияИндикатораФоновогоЗадания, Индикатор.ЧастотаОбновленияФормыВСекундах);			
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Индикатор.Клиент.ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
				ОбновитьИндикатор(Индикатор, Индикатор.МаксимальноеЗначение, "Выполнение завершено", , , Истина); 
			ИначеЕсли Индикатор.Клиент.ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				ОбновитьИндикатор(Индикатор, Индикатор.МаксимальноеЗначение, "Выполнение завершено аварйино. " + ПодробноеПредставлениеОшибки(Индикатор.Клиент.ФоновоеЗадание.ИнформацияОбОшибке), , , Истина); 			
			ИначеЕсли Индикатор.Клиент.ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				ОбновитьИндикатор(Индикатор, Индикатор.МаксимальноеЗначение, "Выполнение отменено", , , Истина);
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
		
	ОбновитьФормуИндикатора(Индикатор, Форма);
	
	Возврат Форма;
	
КонецФункции

//	Процедура помещаемая в обработчик обновления индикатора фонового задания.
//
Функция ОбработчикОбновленияИндикатораФоновогоЗадания(Индикатор, Форма = Неопределено) Экспорт
	
	Если Индикатор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбновитьИндикатор(Индикатор, , , , Форма);
	
	Возврат Индикатор = Неопределено
	
КонецФункции

//	Закрывает форму индикатора.
//
Процедура ЗакрытьФормуИндикатора(Индикатор, Форма = Неопределено) Экспорт
	
	Если Индикатор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Форма = Неопределено Тогда
		Форма = ПолучитьФормуИндикатора(Индикатор);
		Если Форма = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Индикатор.Клиент.ФоновоеЗадание <> Неопределено И Индикатор.Клиент.ОбработчикОбновленияИндикатораФоновогоЗадания <> Неопределено Тогда
		Если Форма.ВладелецФормы <> Неопределено И ТипЗнч(Форма.ВладелецФормы) = Тип("Форма") Тогда
			Форма.ВладелецФормы.ОтключитьОбработчикОжидания(Индикатор.Клиент.ОбработчикОбновленияИндикатораФоновогоЗадания);
		Иначе
			ОтключитьОбработчикОжидания(Индикатор.Клиент.ОбработчикОбновленияИндикатораФоновогоЗадания);
		КонецЕсли;		
	КонецЕсли;
	
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли



/////////////////////////////////////////////////////////////////////////////////////
//	ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ИНДИКАТОРОМ

//	Обновление данных индикатора. Возвращает Истина, если нужно обновить форму.
//
Функция ОбновитьДанныеИндикатора(Индикатор, Значение, Комментарий, КомментарийОбработки)
	
	ОбновитьФорму = Ложь;
	
	ТекущееЗначение = Индикатор.Значение;
	НовоеЗначение = ТекущееЗначение;
	Если Значение = Неопределено Тогда
		НовоеЗначение = ТекущееЗначение + Индикатор.Шаг;
	Иначе
		НовоеЗначение = Значение;
	КонецЕсли;
	
	//	Новое значение индикатора.
	Индикатор.Значение = НовоеЗначение;
	НовоеЗначениеФормы = НовоеЗначение * Индикатор.КоличествоОбновленийИндикатораНаОдинПроцент;
	
	//	Проверяем необходимость обновления значения формы.
	ИзменениеЗначения = НовоеЗначениеФормы - Индикатор.ЗначениеФормы;
	Если Макс(ИзменениеЗначения, -ИзменениеЗначения) >= Индикатор.МинимальноеИзменениеИндикатораДляОбновленияФормы Тогда
		ОбновитьФорму = Истина;
		Индикатор.ЗначениеФормы = НовоеЗначениеФормы;		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Комментарий) И Комментарий <> Индикатор.КомментарийЗначения Тогда
		ОбновитьФорму = Истина;
		Индикатор.КомментарийЗначения = Комментарий;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КомментарийОбработки) И КомментарийОбработки <> Индикатор.КомментарийОбработкиДанных Тогда
		ОбновитьФорму = Истина;
		Индикатор.КомментарийОбработкиДанных = КомментарийОбработки;
	КонецЕсли;
	
	Если ТекущаяДата() - Индикатор.ВремяПоследнегоОбновленияФормы < Индикатор.ЧастотаОбновленияФормыВСекундах Тогда
		ОбновитьФорму = Ложь;
	КонецЕсли;
	
	Если ОбновитьФорму Тогда
		Индикатор.ВремяПоследнегоОбновленияФормы = ТекущаяДата();
	КонецЕсли;
	
	Возврат ОбновитьФорму;
	
КонецФункции


#Если Клиент Тогда
	
//	Обновление формы на клиенте.
//
Процедура ОбновитьФормуИндикатора(Индикатор, Форма)
	
	Если Форма = Неопределено Тогда
		Форма = ПолучитьФормуИндикатора(Индикатор);
		Если Форма = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Форма.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначение(Форма.Значение, Индикатор.ЗначениеФормы);	
	УстановитьЗначение(Форма.КомментарийЗначения, Индикатор.КомментарийЗначения);
	УстановитьЗначение(Форма.КомментарийОбработкиДанных, Индикатор.КомментарийОбработкиДанных);
	УстановитьЗначение(Форма.МаксимальноеЗначение, Индикатор.МаксимальноеЗначение * Индикатор.КоличествоОбновленийИндикатораНаОдинПроцент);
	УстановитьЗначение(Форма.НаименованиеОбработкиДанных, Индикатор.НаименованиеОбработкиДанных);
		
КонецПроцедуры

//	Возвращает форму индикатора.
Функция ПолучитьФормуИндикатора(Индикатор)	
	ИмяОбщейФормы = Индикатор.Клиент.ИмяОбщейФормы;
	Если Метаданные.ОбщиеФормы.Найти(ИмяОбщейФормы) <> Неопределено Тогда
		Если Индикатор.Клиент.ВладелецФормы <> Неопределено Тогда
			Возврат ПолучитьОбщуюФорму(ИмяОбщейФормы, Индикатор.Клиент.ВладелецФормы, Индикатор.УникальныйИдентификатор);
		Иначе
			Возврат ПолучитьОбщуюФорму(ИмяОбщейФормы, , Индикатор.УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли Метаданные().Формы.Найти(ИмяОбщейФормы) <> Неопределено Тогда
		Если Индикатор.Клиент.ВладелецФормы <> Неопределено Тогда
			Возврат ПолучитьФорму(ИмяОбщейФормы, Индикатор.Клиент.ВладелецФормы, Индикатор.УникальныйИдентификатор);
		Иначе
			Возврат ПолучитьФорму(ИмяОбщейФормы, , Индикатор.УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции

#Иначе

//	Отправка сообщения с сервера о необходимости обновления формы.
//
Процедура ОтправитьИндикаторНаКлиент(Индикатор)	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.ИдентификаторНазначения = Индикатор.УникальныйИдентификатор;
	Сообщение.Текст = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(Индикатор, Новый СжатиеДанных(9)));
	Сообщение.Сообщить();	
КонецПроцедуры
	
#КонецЕсли


/////////////////////////////////////////////////////////////////////////////////////
//	УСТАНОВИТЬ ДОПОЛНИТЕЛЬНЫЙ ПАРАМЕТР ИНДИКАТОРА

Процедура УстановитьДопПараметр(Индикатор, ДополнительныеПараметры, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено)
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Индикатор.Вставить(ИмяПараметра, ДополнительныеПараметры[ИмяПараметра]);
	Иначе
		Индикатор.Вставить(ИмяПараметра, ЗначениеПоУмолчанию);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьЗначение(Приемник, Источник)
	Если Приемник <> Источник Тогда
		Приемник = Источник;
	КонецЕсли;
КонецПроцедуры

//	}РАБОТА С ИНДИКАТОРОМ ХОДА ВЫПОЛНЕНИЯ
/////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
//	ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПА ОБЪЕКТА МЕТАДАННЫХ

//	ТипОбъектаМетаданных - "Справочник", "Документ"...
Функция ПринадлежностьТипуОбъектаМетаданных(ТипОбъектаМетаданных, ОбъектМетаданных)
	
	Возврат ВРег(ТипОбъектаМетаданных) + "." = ВРег(Лев(ОбъектМетаданных.ПолноеИмя(), СтрДлина(ТипОбъектаМетаданных) + 1))
	
КонецФункции // ПринадлежностьКлассуМетаданных()

//	Ссылочные типы данных
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("Документ", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("Справочник", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("ПланОбмена", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("ПланВидовХарактеристик", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("БизнесПроцесс", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("Задача", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("ПланСчетов", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("ПланВидовРасчета", ОбъектМетаданных);
	
КонецФункции

//	Регистры
Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("РегистрСведений", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("РегистрНакопления", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("РегистрБухгалтерии", ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("РегистрРасчета", ОбъектМетаданных);
	
КонецФункции

//	Константы
Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт
	
	Возврат ПринадлежностьТипуОбъектаМетаданных("Константа", ОбъектМетаданных);
	
КонецФункции

//	Общие
Функция ЭтоРегистр(ОбъектМетаданных) Экспорт
	
	Возврат ЭтоРегистрСведений(ОбъектМетаданных)
		Или ЭтоРегистрНакопления(ОбъектМетаданных)
		Или ЭтоРегистрБухгалтерии(ОбъектМетаданных)
		Или ЭтоРегистрРасчета(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	
	Возврат ЭтоСправочник(ОбъектМетаданных) 
		Или ЭтоДокумент(ОбъектМетаданных)
		Или ЭтоБизнесПроцесс(ОбъектМетаданных)
		Или ЭтоЗадача(ОбъектМетаданных)
		Или ЭтоПланСчетов(ОбъектМетаданных)
		Или ЭтоПланОбмена(ОбъектМетаданных)
		Или ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		Или ЭтоПланВидовРасчета(ОбъектМетаданных)
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
//	ФУНКЦИИ ОПРЕДЕЛЕНИЯ ИЕРАРХИИ ОБЕКТА МЕТАДАННЫХ

//	Определяет есть ли хоть какая иерархия Групп или Элементов
Функция ЕстьИерархия(ОбъектМетаданных) Экспорт
	
	Если ЭтоСправочник(ОбъектМетаданных) Или ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		
		Возврат ОбъектМетаданных.Иерархический;
		
	ИначеЕсли ЭтоПланСчетов(ОбъектМетаданных) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

//	Определяет есть ли иерархия Групп
Функция ЕстьИерархияГрупп(ОбъектМетаданных) Экспорт
		
	Если ЭтоСправочник(ОбъектМетаданных) Тогда
		
		Возврат ОбъектМетаданных.Иерархический И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
	ИначеЕсли ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		
		Возврат ОбъектМетаданных.Иерархический;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

//	Определяет есть ли иерархия Групп
Функция ЕстьИерархияЭлементов(ОбъектМетаданных) Экспорт
		
	Если ЭтоСправочник(ОбъектМетаданных) Тогда
		
		Возврат ОбъектМетаданных.Иерархический И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов;
		
	ИначеЕсли ЭтоПланСчетов(ОбъектМетаданных) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

//	Проверяет наличие владельцев у оъекта
Функция ЕстьВладелец(ОбъектМетаданных) Экспорт
	
	Возврат ЭтоСправочник(ОбъектМетаданных) И ОбъектМетаданных.Владельцы.Количество();
	
КонецФункции

//	Для ссылочных типов данных

Функция ЭтоСсылка(Данные, ОбъектМетаданных) Экспорт
	
	Возврат ТипЗнч(Данные) = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."))
	
КонецФункции
	
Функция ЭтоОбъект(Данные, ОбъектМетаданных) Экспорт
	
	Возврат ТипЗнч(Данные) = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Объект."))
	
КонецФункции

//	Определяет является ли элемент группой
Функция ЭтоГруппа(Данные, ОбъектМетаданных) Экспорт
	
	Если ЕстьИерархияГрупп(ОбъектМетаданных) Тогда
		
		Если ЭтоОбъект(Данные, ОбъектМетаданных) Тогда
			
			Возврат Данные.ЭтоГруппа;
			
		ИначеЕсли ЭтоСсылка(Данные, ОбъектМетаданных) Тогда
			
			Возврат ЗначенияРеквизитовПоСсылке(Данные, "ЭтоГруппа", ОбъектМетаданных).ЭтоГруппа = Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
//	ФУНКЦИИ ОПРЕДЕЛЕНИЯ ОСОБЕННОСТЕЙ РЕГИСТРОВ

//	Есть ли регистратор определяем по метаданным регистра
Функция ЕстьРегистратор(ОбъектМетаданных) Экспорт
	
	Если ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Возврат ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//	Есть ли поле период у регистра по метаданным его
Функция ЕстьПериод(ОбъектМетаданных) Экспорт
	
	Если ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		Возврат ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьКартинкуИзМакета(ИмяМакета, ПрозрачныйФон = Истина)
	
	Возврат Новый Картинка(ПолучитьМакет(ИмяМакета), ПрозрачныйФон);
	
КонецФункции



//////////////////////////////////////////////////////////////////
//	РАБОТА С ОБЪЕКТАМИ КОНФИГУРАЦИИ

//	Возвращает соответствие "Объект" (строка) - "Картинка"
Функция КартинкиОбъектовКонфигурации()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("ПланОбмена", БиблиотекаКартинок.ПланОбмена);
	Соответствие.Вставить("Константа", БиблиотекаКартинок.Константа);
	Соответствие.Вставить("Справочник", БиблиотекаКартинок.Справочник);
	Соответствие.Вставить("Документ", БиблиотекаКартинок.Документ);
	Соответствие.Вставить("ПланВидовХарактеристик", БиблиотекаКартинок.ПланВидовХарактеристик);
	Соответствие.Вставить("ПланСчетов", БиблиотекаКартинок.ПланСчетов);
	Соответствие.Вставить("ПланВидовРасчета", БиблиотекаКартинок.ПланВидовРасчета);
	Соответствие.Вставить("РегистрСведений", БиблиотекаКартинок.РегистрСведений);
	Соответствие.Вставить("РегистрНакопления", БиблиотекаКартинок.РегистрНакопления);
	Соответствие.Вставить("РегистрБухгалтерии", БиблиотекаКартинок.РегистрБухгалтерии);
	Соответствие.Вставить("РегистрРасчета", БиблиотекаКартинок.РегистрРасчета);
	Соответствие.Вставить("БизнесПроцесс", БиблиотекаКартинок.БизнесПроцесс);
	Соответствие.Вставить("Задача", БиблиотекаКартинок.Задача);
	
	Соответствие.Вставить("Конфигурация", ПолучитьКартинкуИзМакета("Конфигурация"));
	Соответствие.Вставить("Реквизит", ПолучитьКартинкуИзМакета("Реквизит"));
	Соответствие.Вставить("ТабличнаяЧасть", ПолучитьКартинкуИзМакета("ТабличнаяЧасть"));
	
	Возврат Соответствие;
	
КонецФункции

//	Добавление объекта конфигурации в таблицу объектов конфигурации
Функция ДобавитьОбъектКонфигурации(Таблица, Объект, Коллекция
	,	Представление = Неопределено
	,	ПредставлениеКоллекции = Неопределено
	,	Ссылочный = Истина
	,	Регистр = Ложь
	,	МетодСоздатьЭлемент = ""
	,	МетодСоздатьГруппу = "")
	
	Описание = Таблица.Добавить();
	
	Описание.Объект = Объект;
	Описание.Коллекция = Коллекция;
	Описание.Представление = ?(Представление = Неопределено, Объект, Представление);
	Описание.ПредставлениеКоллекции = ?(ПредставлениеКоллекции = Неопределено, Коллекция, ПредставлениеКоллекции);
	Описание.Ссылочный = Ссылочный;
	Описание.Регистр = Регистр;
	Описание.МетодСоздатьЭлемент = МетодСоздатьЭлемент;
	Описание.МетодСоздатьГруппу = МетодСоздатьГруппу;
	
	Возврат Описание;
	
КонецФункции

//	Объекты конфигурации, которые в базе данных имеют таблицы
Функция ОбъектыКонфигурации()
	
	//	Таблица объектов конфигурации
	Таблица = новый ТаблицаЗначений;
	Колонки = Таблица.Колонки;
	Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Коллекция", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПредставлениеКоллекции", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Ссылочный", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Регистр", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("МетодСоздатьЭлемент", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("МетодСоздатьГруппу", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
		
	ДобавитьОбъектКонфигурации(Таблица, "ПланОбмена", "ПланыОбмена", "План обмена", "Планы обмена", , , "СоздатьУзел");
	ДобавитьОбъектКонфигурации(Таблица, "Константа", "Константы", , , Ложь);
	ДобавитьОбъектКонфигурации(Таблица, "Справочник", "Справочники", , , , , "СоздатьЭлемент", "СоздатьГруппу");
	ДобавитьОбъектКонфигурации(Таблица, "Документ", "Документы", , , , , "СоздатьДокумент");
	ДобавитьОбъектКонфигурации(Таблица, "Перечисление", "Перечисления");
	ДобавитьОбъектКонфигурации(Таблица, "ПланВидовХарактеристик", "ПланыВидовХарактеристик", "План видов характеристик", "Планы видов характеристик", , , "СоздатьЭлемент", "СоздатьГруппу");
	ДобавитьОбъектКонфигурации(Таблица, "ПланСчетов", "ПланыСчетов", "План счетов", "Планы счетов", , , "СоздатьСчет");
	ДобавитьОбъектКонфигурации(Таблица, "ПланВидовРасчета", "ПланыВидовРасчета", "План видов расчета", "Планы видов расчета", , , "СоздатьВидРасчета"); 
	ДобавитьОбъектКонфигурации(Таблица, "РегистрСведений", "РегистрыСведений", "Регистр сведений", "Регистры сведений", Ложь, Истина);
	ДобавитьОбъектКонфигурации(Таблица, "РегистрНакопления", "РегистрыНакопления", "Регистр накопления", "Регистры накопления", Ложь, Истина);
	ДобавитьОбъектКонфигурации(Таблица, "РегистрРасчета", "РегистрыРасчета", "Регистр расчета", "Регистры расчета", Ложь, Истина);
	ДобавитьОбъектКонфигурации(Таблица, "РегистрБухгалтерии", "РегистрыБухгалтерии", "Регистр бухгалтерии", "Регистры бухгалтерии", Ложь, Истина);
	ДобавитьОбъектКонфигурации(Таблица, "БизнесПроцесс", "БизнесПроцессы", "Бизнес-процесс", "Бизнес-процессы", , , "СоздатьБизнесПроцесс");
	ДобавитьОбъектКонфигурации(Таблица, "Задача", "Задачи", , , , , "СоздатьЗадачу");
	
	КартинкиОбъектов = КартинкиОбъектовКонфигурации();
	Для Каждого ОписаниеОбъекта Из Таблица Цикл
		Если КартинкиОбъектов[ОписаниеОбъекта.Объект] <> Неопределено Тогда
			ОписаниеОбъекта.Картинка = КартинкиОбъектов[ОписаниеОбъекта.Объект];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ОписаниеОбъектаКонфигурации(ОбъектМетаданных) Экспорт
	
	Если мОбъектыКонфигурации = Неопределено Тогда
		мОбъектыКонфигурации = ОбъектыКонфигурации();
	КонецЕсли;
	
	ОбъектыКонфигурации = мОбъектыКонфигурации;
	
	Структура = Новый Структура;
	Для Каждого Колонка Из ОбъектыКонфигурации.Колонки Цикл
		Структура.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Поз = Найти(ПолноеИмя, ".");
	Если Поз > 1 Тогда
		Объект = Лев(ПолноеИмя, Поз - 1);
		СтрокаОбъекта = ОбъектыКонфигурации.Найти(Объект, "Объект");
		Если СтрокаОбъекта <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Структура, СтрокаОбъекта);
			Возврат Структура;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



///////////////////////////////////////////////////////////////////////////////
//	ОБЩИЕ ФУНКЦИИ

//	Получаем значения реквизитов по ссылке
Функция ЗначенияРеквизитовПоСсылке(Ссылка, СтрокаРеквизитов, ОбъектМетаданных = Неопределено, ПроверятьТипСсылки = Ложь) Экспорт
	
	СтруктураРеквизитов = Новый Структура(СтрокаРеквизитов);
	
	Если ПроверятьТипСсылки И Не ЭтоСсылка(Ссылка, ОбъектМетаданных) Тогда
		Возврат СтруктураРеквизитов;
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = Ссылка.Метаданные();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	" + СтрокаРеквизитов + "
	|ИЗ 
	|	" + ОбъектМетаданных.ПолноеИмя() + "
	|ГДЕ
	|	Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка, СтрокаРеквизитов);
		
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			Если ЭлементСтруктуры.Значение = NULL Тогда
				СтруктураРеквизитов[ЭлементСтруктуры.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

//	Получаем значение одного реквизита по ссылке
Функция ЗначениеРеквизитаПоСсылке(Ссылка, ИмяРеквизита, ОбъектМетаданных = Неопределено, ПроверятьТипСсылки = Ложь) Экспорт
	
	Возврат ЗначенияРеквизитовПоСсылке(Ссылка, ИмяРеквизита, ОбъектМетаданных, ПроверятьТипСсылки)[ИмяРеквизита];
	
КонецФункции

//	Проверяет наличие общего модуля для замены на сервере или в фоновом режиме
Функция ЕстьОбщиеМодулиЗамены() Экспорт
	
	Возврат Метаданные.ОбщиеМодули.Найти("ЗаменаСсылочныхЭлементов") <> Неопределено;
	
КонецФункции

// Возвращает Истина, если информационная база - файловая.
//
// Параметры:
//    СтрокаСоединенияСБД - Строка - строка соединения. Если параметр не задан, 
//                                   то используется текущая информационная база.
//
Функция ЭтоФайловаяИБ(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	Возврат Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
	
КонецФункции


//	Получить картинку из макета
Функция ПолучитьКартинку(Макет) Экспорт
	
	Возврат Новый Картинка(ПолучитьМакет(Макет));
	
КонецФункции

Функция МассивВСтрокуПоШаблону(Массив, Разделитель = ", ", Шаблон = "@", Подстрока = "@") Экспорт
	
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Если ТипЗнч(Элемент) = Тип("Массив") Тогда
			
			СтрокаЭлемента = Шаблон;
			
			Кл = Элемент.Количество();
			Для Сч = 1 По Кл Цикл
				СтрокаЭлемента = СтрЗаменить(СтрокаЭлемента, Подстрока + Формат(Кл - Сч), Элемент[Кл - Сч]);
			КонецЦикла;
			
			Результат = Результат + Разделитель + СтрокаЭлемента;
			
		Иначе
			Результат = Результат + Разделитель + СтрЗаменить(Шаблон, Подстрока, Элемент);
		КонецЕсли;
		
	КонецЦикла;
	Результат = Сред(Результат, СтрДлина(Разделитель) + 1);
	
	Возврат Результат;
	
КонецФункции

Функция СтрокуВМассив(Знач Стр, Разделитель = ";") Экспорт

	Массив = Новый Массив;
	
	Поз = Найти(Стр, Разделитель);
	Пока Поз > 0 Цикл
		Массив.Добавить(Лев(Стр, Поз - 1));
		Стр = Сред(Стр, Поз + 1);
		Поз = Найти(Стр, Разделитель);	
	КонецЦикла;
	
	Массив.Добавить(Стр);
	
	Возврат Массив;
	
КонецФункции

//	Из строки ТЗ получаем структуру
Функция СтруктураИзСтрокиТЗ(СтрокаТЗ) Экспорт
	
	Структура = Новый Структура;
	
	Колонки = СтрокаТЗ.Владелец().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;

КонецФункции

//	Проверка подчиненности Ссылка2 объекту Ссылка1
Функция ЭтоПодчиненный(Ссылка1, Ссылка2, ОбъектМетаданных1, ОбъектМетаданных2) Экспорт
	
	Владельцы2 = ОбъектМетаданных2.Владельцы;
	
	Если Владельцы2.Количество() = 0 Тогда
		
		Возврат Ложь;

	ИначеЕсли Владельцы2.Содержит(ОбъектМетаданных1) Тогда
		
		Возврат Ссылка2.Владелец = Ссылка1;
		
	Иначе //	Владельцы2.Количество() > 0
		
		Владелец2 = Ссылка2.Владелец;
		ВладелецОбъектМетаданных2 = Владелец2.Метаданные();
		
		Возврат ЭтоПодчиненный(Ссылка1, Ссылка2.Владелец, ОбъектМетаданных1, ВладелецОбъектМетаданных2);
		
	КонецЕсли;
	
КонецФункции



///////////////////////////////////////////////////////////////////////////////////////
//	СЕРВИСНЫЕ ФУНКЦИИ "РАБОТА С ФЛАЖКАМИ ДЕРЕВА"

//	Кэш - соответствие (кэширует состояние флажков между состояниями все выделено и все невыделено)
//	ОтслеживатьИзменения - возвращает соответствие (строка дерева, установленные состояния)
Функция ПриИзмененииФлажкаДереваЗначений(Строка, ПолеФлажка = "Пометка", Кэш = Неопределено, ОтслеживатьИзменения = Ложь) Экспорт
		
	Если ОтслеживатьИзменения Тогда
		Изменения = Новый Соответствие;
	Иначе
		Изменения = Неопределено;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат Изменения;
	КонецЕсли;
	
	СтрФлажок = Строка[ПолеФлажка];
	
	Если Кэш = Неопределено Тогда
		
		Если СтрФлажок = 2 Тогда
			Строка[ПолеФлажка] = 0;
		КонецЕсли;
		
		ПриИзмененииФлажкаДереваЗначенийОбновить(Строка, ПолеФлажка, Неопределено, Ложь, Ложь, Ложь, Изменения);
		
	Иначе
	
		//	Определяем нужно ли записывать значения в кэш
		ЗаписатьКэш = СтрФлажок = 0;
		Если ЗаписатьКэш Тогда
			Кэш.Вставить(0, Строка);
		Иначе
			Если Кэш[0] <> Строка Тогда
				Кэш.Очистить();	
			КонецЕсли;
		КонецЕсли;
		
		//	Определяем нужно ли восстанавливать значения из кэша
		ВосстановитьКэш = СтрФлажок = 2 И Кэш[0] = Строка;
		
		ПриИзмененииФлажкаДереваЗначенийОбновить(Строка, ПолеФлажка, Кэш, ЗаписатьКэш, ВосстановитьКэш, Ложь, Изменения);
	
	КонецЕсли;
	
	Родитель = Строка.Родитель;
	Если Родитель <> Неопределено Тогда
		ПриИзмененииФлажкаДереваЗначенийОбновить(Родитель, ПолеФлажка, Неопределено, Ложь, Ложь, Истина, Изменения);
	КонецЕсли;
	
	Если Изменения <> Неопределено Тогда
		Изменения.Вставить(Строка, Строка[ПолеФлажка]);
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

Процедура ПриИзмененииФлажкаДереваЗначенийОбновить(Строка, ПолеФлажка, Кэш, ЗаписатьКэш, ВосстановитьКэш, ОбновитьРодителей, Изменения)
	
	ТекФлажок = Строка[ПолеФлажка];
	ДочСтроки = Строка.Строки;
	
	//	Для обновления тек строки по потомкам
	Есть0 = Ложь;
	Есть1 = Ложь;
	Есть2 = Ложь;
	НовФлажок = -1;
	
	Для Каждого ДочСтр Из ДочСтроки Цикл
		
		ДочФлажок = ДочСтр[ПолеФлажка];
		
		Если ЗаписатьКэш Тогда
			
			Кэш[ДочСтр] = ДочФлажок;
			
			Если ДочФлажок <> ТекФлажок  Тогда
				ДочСтр[ПолеФлажка] = ТекФлажок;
				Если Изменения <> Неопределено Тогда
					Изменения.Вставить(ДочСтр, ТекФлажок);
				КонецЕсли;
				ПриИзмененииФлажкаДереваЗначенийОбновить(ДочСтр, ПолеФлажка, Кэш, ДочФлажок = 2, Ложь, Ложь, Изменения);
			КонецЕсли;
			
		ИначеЕсли ВосстановитьКэш Тогда
			
			КэшФлажок = Кэш[ДочСтр];
			
			Если КэшФлажок <> Неопределено Тогда
				Если КэшФлажок <> ДочФлажок Или КэшФлажок = 2 Тогда
					ДочСтр[ПолеФлажка] = КэшФлажок;
					Если Изменения <> Неопределено И КэшФлажок <> ДочФлажок Тогда
						Изменения.Вставить(ДочСтр, КэшФлажок);
					КонецЕсли;
					Если КэшФлажок = 2 Тогда
						//	Восстанавливаем дочерние значения
						ПриИзмененииФлажкаДереваЗначенийОбновить(ДочСтр, ПолеФлажка, Кэш, Ложь, Истина, Ложь, Изменения);
					Иначе
						ПриИзмененииФлажкаДереваЗначенийОбновить(ДочСтр, ПолеФлажка, Неопределено, Ложь, Ложь, Ложь, Изменения);					
					КонецЕсли;
				КонецЕсли;
			Иначе
				//	Если в кэше нет строки
				
				Если ТекФлажок = 0 Или ТекФлажок = 1 Тогда
					НовФлажок = ТекФлажок;
				Иначе
					НовФлажок = 0;
				КонецЕсли;
				
				Если НовФлажок <> ДочФлажок Тогда 
					ДочСтр[ПолеФлажка] = НовФлажок;
					Если Изменения <> Неопределено Тогда
						Изменения.Вставить(ДочСтр, НовФлажок);
					КонецЕсли;
					ПриИзмененииФлажкаДереваЗначенийОбновить(ДочСтр, ПолеФлажка, Неопределено, Ложь, Ложь, Ложь, Изменения);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Не ОбновитьРодителей Тогда
			
			Если ДочФлажок <> ТекФлажок Тогда
				ДочСтр[ПолеФлажка] = ТекФлажок;
				Если Изменения <> Неопределено Тогда
					Изменения.Вставить(ДочСтр, ТекФлажок);
				КонецЕсли;
				ПриИзмененииФлажкаДереваЗначенийОбновить(ДочСтр, ПолеФлажка, Неопределено, Ложь, Ложь, Ложь, Изменения);
			КонецЕсли;
			
		КонецЕсли;
		
		//	Для обновления значения текущей строки запоминаем
		//	какие установлись значения дочерних строк
		ДочФлажок = ДочСтр[ПолеФлажка];
		Если ДочФлажок = 0 Тогда
			Есть0 = Истина;
		ИначеЕсли ДочФлажок = 1 Тогда
			Есть1 = Истина;
		Иначе
			Есть2 = Истина;
		КонецЕсли;
		
		Если (Есть0 И Есть1) Или Есть2 Тогда
			НовФлажок = 2;
		КонецЕсли;
		
		Если Не ЗаписатьКэш И Не ВосстановитьКэш И ОбновитьРодителей И НовФлажок = 2 Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	//	Конечно определяем новое значение тек. строки
	Если НовФлажок = -1 Тогда
		Если Есть0 Тогда
			НовФлажок = 0;
		ИначеЕсли Есть1 Тогда
			НовФлажок = 1;
		КонецЕсли;
	КонецЕсли;
	
	//	Обновляем тек значение строки
	Если НовФлажок <> -1 Тогда
		Если ТекФлажок <> НовФлажок Тогда
			Строка[ПолеФлажка] = НовФлажок;
			Если Изменения <> Неопределено Тогда
				Изменения.Вставить(Строка, НовФлажок);
			КонецЕсли;
			Если ОбновитьРодителей Тогда
				Родитель = Строка.Родитель;
				Если Родитель <> Неопределено Тогда
					ПриИзмененииФлажкаДереваЗначенийОбновить(Родитель, ПолеФлажка, Неопределено, Ложь, Ложь, Истина, Изменения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//	если нет дочерних строк
		Если ТекФлажок = 2 Тогда
			Строка[ПолеФлажка] = 0;
			Если Изменения <> Неопределено Тогда
				Изменения.Вставить(Строка, 0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////////////
//	ВЕРСИОНИРОВАНИЕ

Функция ПредставлениеВерсии() Экспорт
	Возврат Версия() + " от " + Формат(ДатаВерсии(), "ДФ=dd.MM.yyyy");
КонецФункции

Функция СайтОбработки() Экспорт
	Возврат "http://infostart.ru/public/124277/";
КонецФункции




///////////////////////////////////////////////////////////////////////////////////////
//	ИНЦИАЛИЗАЦИЯ ОБРАБОТКИ

мОбщиеМодулиЗаменыСсылочныхЭлементовДоступны =
	Метаданные.ОбщиеМодули.Найти("ЗаменаСсылочныхЭлементов") <> Неопределено
	И Метаданные.ОбщиеМодули.Найти("ЗаменаСсылочныхЭлементовПереопределяемый") <> Неопределено
	И Версия() = Вычислить("ЗаменаСсылочныхЭлементов").Версия();
	
мЭтоКлиентСервер = Не ЭтоФайловаяИБ();
