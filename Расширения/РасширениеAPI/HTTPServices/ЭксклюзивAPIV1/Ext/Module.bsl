//1.01 Первая версия

//************************************************
//Работа с базой данных
//************************************************
#Область РаботаСБазойДанных
Функция ПолучитьПользователяAPI(КлючПользователя)
	
	ПользовательAPI = Справочники.экс_ПользователиAPI.НайтиПоРеквизиту("КлючДоступа",КлючПользователя);
	
	Если ПользовательAPI.ПометкаУдаления Тогда
		ПользовательAPI = Справочники.экс_ПользователиAPI.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПользовательAPI;
	
КонецФункции

Функция СформироватьСтруктуруСоСкладами(ПользовательAPI)
	
	массивСклады = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	экс_ПользователиAPIДоступныеСклады.Склад.Ссылка КАК СкладСсылка
	|ИЗ
	|	Справочник.экс_ПользователиAPI.ДоступныеСклады КАК экс_ПользователиAPIДоступныеСклады
	|ГДЕ
	|	экс_ПользователиAPIДоступныеСклады.Ссылка = &ПользовательAPI";
	
	Запрос.УстановитьПараметр("ПользовательAPI",ПользовательAPI);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		структураСклад = Новый Структура("id,address");
		структураСклад.id = Строка(Выборка.СкладСсылка.УникальныйИдентификатор());
		структураСклад.address = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Выборка.СкладСсылка,Справочники.ВидыКонтактнойИнформации.АдресСклада);
		
		массивСклады.Добавить(структураСклад);
		
	КонецЦикла;
	
	Возврат массивСклады;
	
КонецФункции

Функция СформироватьСтруктуруБрендовМоделей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныйРеквизитБренд.ЗначениеРеквизита КАК Бренд,
	|	ДополнительныйРеквизитМодель.ЗначениеРеквизита КАК Модель
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|			СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток) КАК Остаток
	|		ИЗ
	|			РегистрНакопления.СвободныеОстатки.Остатки(, ) КАК СвободныеОстаткиОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СвободныеОстаткиОстатки.Номенклатура) КАК Остатки
	|		ПО НоменклатураТаблица.Ссылка = Остатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(НоменклатураДополнительныеРеквизиты.Значение) = ТИП(Справочник.ЗначенияСвойствОбъектов)
	|					ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
	|				ИНАЧЕ НоменклатураДополнительныеРеквизиты.Значение
	|			КОНЕЦ КАК ЗначениеРеквизита
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ГДЕ
	|			НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоБренд) КАК ДополнительныйРеквизитБренд
	|		ПО НоменклатураТаблица.Ссылка = ДополнительныйРеквизитБренд.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(НоменклатураДополнительныеРеквизиты.Значение) = ТИП(Справочник.ЗначенияСвойствОбъектов)
	|					ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
	|				ИНАЧЕ НоменклатураДополнительныеРеквизиты.Значение
	|			КОНЕЦ КАК ЗначениеРеквизита
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ГДЕ
	|			НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоМодель) КАК ДополнительныйРеквизитМодель
	|		ПО НоменклатураТаблица.Ссылка = ДополнительныйРеквизитМодель.Номенклатура
	|ГДЕ
	|	НоменклатураТаблица.Артикул <> """"
	|	И НоменклатураТаблица.ВидНоменклатуры = &ВидНоменклатурыАвтошиныНовые
	|	И НЕ НоменклатураТаблица.Производитель В (&мсвПроизводители)
	|	И ЕСТЬNULL(Остатки.Остаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Бренд,
	|	Модель
	|ИТОГИ ПО
	|	Бренд";
	
	УстановитьПривилегированныйРежим(Истина);
	тзНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиЭксклюзив","Форточки",,"НастройкиЭксклюзив");
		
	Если ТипЗнч(тзНастройки) = Тип("ТаблицаЗначений") И тзНастройки.Количество() > 0 Тогда		
		
		СписокПроизводителей = тзНастройки[0].ИсключитьПроизводителей;
		мсвПроизводители = СписокПроизводителей.ВыгрузитьЗначения();		
		
	Иначе
		
		ВызватьИсключение "Не заданы настройки обмена";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидНоменклатурыАвтошиныНовые",Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобильные шины (легковые)",Истина));
	Запрос.УстановитьПараметр("мсвПроизводители",мсвПроизводители);
	Запрос.УстановитьПараметр("СвойствоБренд",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Бренд",Истина));
	Запрос.УстановитьПараметр("СвойствоМодель",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Модель легковой шины",Истина));
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	мсвБренды = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураБренд = Новый Структура;
		структураБренд.Вставить("name",Выборка.Бренд);
		
		ВыборкаМодели = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		структураБренд.Вставить("models",Новый Массив);
		
		Пока ВыборкаМодели.Следующий() Цикл
			
			структураБренд.models.Добавить(ВыборкаМодели.Модель);
			
		КонецЦикла;
		
		мсвБренды.Добавить(структураБренд);
		
	КонецЦикла;
	
	Возврат мсвБренды;
	
КонецФункции

Функция СформироватьСтруктуруСШинами(ПользовательAPI,структураПараметры,ВыгружатьОстатки = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	тзНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиЭксклюзив","Форточки",,"НастройкиЭксклюзив");
		
	Если ТипЗнч(тзНастройки) = Тип("ТаблицаЗначений") И тзНастройки.Количество() > 0 Тогда		
		
		СписокПроизводителей = тзНастройки[0].ИсключитьПроизводителей;
		мсвПроизводители = СписокПроизводителей.ВыгрузитьЗначения();		
		
	Иначе
		
		ВызватьИсключение "Не заданы настройки обмена";
		
	КонецЕсли;
	
	таблицаДопРеквизитов = ХранилищеОбщихНастроек.Загрузить("НастройкиЭксклюзив","API_РеквизитыТоваров",,"НастройкиЭксклюзив");
		
	Если ТипЗнч(таблицаДопРеквизитов) <> Тип("ТаблицаЗначений") ИЛИ таблицаДопРеквизитов.Количество() = 0 Тогда		
		
		ВызватьИсключение "Не заданы настройки обмена";
		
	КонецЕсли;
	
	Если структураПараметры.Свойство("onlyRestsAndPrices") И структураПараметры.onlyRestsAndPrices = "true" Тогда
		таблицаДопРеквизитов.Очистить();
	КонецЕсли;
	
	массивШины = Новый Массив;
	
	ЗапросШины = Новый Запрос;
	ЗапросШины.Текст =
	"ВЫБРАТЬ
	|    НоменклатураТаблица.Ссылка КАК Номенклатура,
	|    НоменклатураТаблица.Код КАК code,
	|    НоменклатураТаблица.Наименование КАК name,
	|    НоменклатураТаблица.Артикул КАК brand_code,
	|    ЕСТЬNULL(Цены.Цена, 0) КАК price,
	|    ЕСТЬNULL(Остатки.Остаток, 0) КАК rest
	|    {ПоляРеквизитов}
	|ИЗ
	|    Справочник.Номенклатура КАК НоменклатураТаблица
	|        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|            ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|            МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	|        ИЗ
	|            РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|        
	|        СГРУППИРОВАТЬ ПО
	|            ЦеныНоменклатурыСрезПоследних.Номенклатура) КАК Цены
	|        ПО (НоменклатураТаблица.Ссылка = Цены.Номенклатура)
	|        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|            СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|            СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток) КАК Остаток
	|        ИЗ
	|            РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склады)) КАК СвободныеОстаткиОстатки
	|        
	|        СГРУППИРОВАТЬ ПО
	|            СвободныеОстаткиОстатки.Номенклатура) КАК Остатки
	|        ПО (НоменклатураТаблица.Ссылка = Остатки.Номенклатура)
	|        {ТаблицыРеквизитов}
	|ГДЕ
	|    НоменклатураТаблица.Артикул <> """"
	|    И НоменклатураТаблица.ВидНоменклатуры = &ВидНоменклатурыАвтошиныНовые
	|    И ЕСТЬNULL(Цены.Цена, 0) > 0
	|    И НЕ НоменклатураТаблица.Производитель В (&мсвПроизводители)
	|    И ЕСТЬNULL(Остатки.Остаток, 0) > 0
	|	 {УсловияРеквизитов}";
	
	ТекстПоляРеквизитов = "";
	ТекстТаблицыРеквизитов = "";
	ТекстУсловияРеквизитов = "";
	
	списокПолей = "id,code,brand_code,name";
	  	
	Для Каждого стрДопРеквизит Из таблицаДопРеквизитов Цикл
		
		ТекстПоляРеквизитов = ТекстПоляРеквизитов + "," + Символы.ПС + 
			СтрЗаменить("ЕСТЬNULL(ДополнительныйРеквизит{Реквизит}.ЗначениеРеквизита,"""") КАК {Реквизит}","{Реквизит}",стрДопРеквизит.Реквизит);
		
		ТекстТаблицыРеквизитов = ТекстТаблицыРеквизитов + Символы.ПС +
			СтрЗаменить("ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
			|ВЫБОР
			|	КОГДА ТИПЗНАЧЕНИЯ(НоменклатураДополнительныеРеквизиты.Значение) = ТИП(Справочник.ЗначенияСвойствОбъектов)
			|		ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
			|	ИНАЧЕ НоменклатураДополнительныеРеквизиты.Значение
			|КОНЕЦ КАК ЗначениеРеквизита
			|ИЗ
			|Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			|ГДЕ
			|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство{Реквизит}) КАК ДополнительныйРеквизит{Реквизит}
			|ПО (НоменклатураТаблица.Ссылка = ДополнительныйРеквизит{Реквизит}.Номенклатура)","{Реквизит}",стрДопРеквизит.Реквизит);
			
		ЗапросШины.УстановитьПараметр("Свойство" + стрДопРеквизит.Реквизит,стрДопРеквизит.Свойство);
		
		списокПолей = списокПолей + "," + стрДопРеквизит.Реквизит;
		
		Если структураПараметры.Свойство(стрДопРеквизит.Реквизит) Тогда
			ТекстУсловияРеквизитов = ТекстУсловияРеквизитов + 
				СтрЗаменить(" И ЕСТЬNULL(ДополнительныйРеквизит{Реквизит}.ЗначениеРеквизита,"""") = """ + структураПараметры[стрДопРеквизит.Реквизит] + """","{Реквизит}",стрДопРеквизит.Реквизит);
		КонецЕсли;
		
	КонецЦикла;
	
	списокПолей = списокПолей + ",price";
	
	ЗапросШины.Текст = СтрЗаменить(ЗапросШины.Текст,"{ПоляРеквизитов}",ТекстПоляРеквизитов);
	ЗапросШины.Текст = СтрЗаменить(ЗапросШины.Текст,"{ТаблицыРеквизитов}",ТекстТаблицыРеквизитов);
	ЗапросШины.Текст = СтрЗаменить(ЗапросШины.Текст,"{УсловияРеквизитов}",ТекстУсловияРеквизитов);
	
	ЗапросШины.УстановитьПараметр("ВидНоменклатурыАвтошиныНовые",Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобильные шины (легковые)",Истина));
	ЗапросШины.УстановитьПараметр("ВидЦены",ПользовательAPI.ВидЦен);
	ЗапросШины.УстановитьПараметр("Склады",ПользовательAPI.ДоступныеСклады.ВыгрузитьКолонку("Склад"));
	ЗапросШины.УстановитьПараметр("мсвПроизводители",мсвПроизводители);
	
	ВыборкаШины = ЗапросШины.Выполнить().Выбрать();
	
	Если ВыгружатьОстатки Тогда
	
		ЗапросОстатки = Новый Запрос;
		ЗапросОстатки.Текст =
		"ВЫБРАТЬ
		|    СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
		|    СвободныеОстаткиОстатки.Склад КАК Склад,
		|    СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток) КАК Остаток
		|ИЗ
		|    РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склады)
		|                                        И Номенклатура.ВидНоменклатуры = &ВидНоменклатурыАвтошиныНовые) КАК СвободныеОстаткиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|    СвободныеОстаткиОстатки.Номенклатура,
		|    СвободныеОстаткиОстатки.Склад
		|
		|ИМЕЮЩИЕ
		|    СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток) > 0";
		
		
		ЗапросОстатки.УстановитьПараметр("ВидНоменклатурыАвтошиныНовые",Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобильные шины (легковые)",Истина));
		ЗапросОстатки.УстановитьПараметр("Склады",ПользовательAPI.ДоступныеСклады.ВыгрузитьКолонку("Склад"));
	
		таблицаОстатки = ЗапросОстатки.Выполнить().Выгрузить();
			
	КонецЕсли;
		
	Пока ВыборкаШины.Следующий() Цикл
								
		структураШина = Новый Структура(списокПолей);
		
		ЗаполнитьЗначенияСвойств(структураШина,ВыборкаШины);
		структураШина.id = Строка(ВыборкаШины.Номенклатура.УникальныйИдентификатор());
		
		Если ВыгружатьОстатки Тогда
			
			массивОстатки = Новый Массив;
			
			строкиОстатки = таблицаОстатки.НайтиСтроки(Новый Структура("Номенклатура",ВыборкаШины.Номенклатура));
			
			Для Каждого строкаОстаток Из строкиОстатки Цикл
				массивОстатки.Добавить(Новый Структура("warehouse,rest",Строка(строкаОстаток.Склад.УникальныйИдентификатор()),строкаОстаток.Остаток));
			КонецЦикла;
			
			структураШина.Вставить("rests",массивОстатки);
			
		КонецЕсли;
		
		массивШины.Добавить(структураШина);
		
	КонецЦикла;	
	
	Возврат массивШины;
	
КонецФункции

Функция СоздатьЗаказ(ПользовательAPI,структураЗаказ)
	
	НачатьТранзакцию();
		
	Партнер = ПользовательAPI.Партнер;
	Контрагент = ПользовательAPI.Контрагент;
	Менеджер = ПользовательAPI.Менеджер;
	
	Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(структураЗаказ.warehouse));
	
	массивОшибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Склад.Наименование) Тогда
		Возврат Новый Структура("errorCode,errorDescription",101,"Не найден склад с идентификатором " + структураЗаказ.warehouse);		
	КонецЕсли;
		
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура");
	ТаблицаТовары.Колонки.Добавить("Количество");
	
	Для Каждого данныеСтрокиЗаказа Из структураЗаказ.goods Цикл
			
		новТовар = ТаблицаТовары.Добавить();
		новТовар.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(данныеСтрокиЗаказа.id));
		новТовар.Количество = Число(данныеСтрокиЗаказа.quantity);
		
		Если НЕ ЗначениеЗаполнено(новТовар.Номенклатура.Наименование) Тогда
			массивОшибки.Добавить("Не найден товар с идентификатором " + данныеСтрокиЗаказа.id);
		КонецЕсли;
			
	КонецЦикла;
	
	Если массивОшибки.Количество() Тогда		
		Возврат Новый Структура("errorCode,errorDescription",102,СтрСоединить(массивОшибки,Символы.ПС));		
	КонецЕсли;
		
	ЗапросОстатки = Новый Запрос;
	ЗапросОстатки.Текст =
	"ВЫБРАТЬ
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			&ДатаДокумента,
	|			Склад = &Склад
	|				И Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки";
	
	ЗапросОстатки.УстановитьПараметр("ДатаДокумента",ТекущаяДата());
	ЗапросОстатки.УстановитьПараметр("Номенклатура",ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
	ЗапросОстатки.УстановитьПараметр("Склад",Склад);
	
	таблицаОстатки = ЗапросОстатки.Выполнить().Выгрузить();
	
	ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
	
	ЗаказКлиента.Комментарий = "Создан через API";
	
	Если структураЗаказ.Свойство("ordernumber") Тогда
		ЗаказКлиента.НомерПоДаннымКлиента = структураЗаказ.ordernumber;
	КонецЕсли;
	
	ЗаказКлиента.Дата = ТекущаяДата();
	ЗаказКлиента.Партнер = Партнер;
	ЗаказКлиента.Контрагент = Контрагент;
	ЗаказКлиента.Организация = Справочники.Организации.НайтиПоНаименованию("Эксклюзив СПб",Истина);
	ЗаказКлиента.Соглашение = Справочники.СоглашенияСКлиентами.НайтиПоНаименованию("Легковой Эксклюзив СПб / нал-терм",Истина);
	ЗаказКлиента.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаказКлиента.ГрафикОплаты = Справочники.ГрафикиОплаты.НайтиПоНаименованию("Оплата в рознице, 100% сразу (наличные, карта)",Истина);
	ЗаказКлиента.Склад = Склад;
	ЗаказКлиента.ЦенаВключаетНДС = Истина;
	ЗаказКлиента.Менеджер = Менеджер;
	ЗаказКлиента.НеОтгружатьЧастями = Истина;
	ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	ЗаказКлиента.ДатаСогласования = ТекущаяДата();
	ЗаказКлиента.Согласован = Истина;
	ЗаказКлиента.ДатаОтгрузки = ЗаказКлиента.Дата;
	ЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ЗаказКлиента.СкидкиРассчитаны = Истина;
	ЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ЗапросДоговор = Новый Запрос;
	ЗапросДоговор.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Наименование = &Наименование";
	
	ЗапросДоговор.УстановитьПараметр("Контрагент",ЗаказКлиента.Контрагент);
	ЗапросДоговор.УстановитьПараметр("Организация",ЗаказКлиента.Организация);
	ЗапросДоговор.УстановитьПараметр("Наименование","ЛегковойЭксклюзивПОКУПАТЕЛЬ");
	
	ВыборкаДоговор = ЗапросДоговор.Выполнить().Выбрать();
	
	Если ВыборкаДоговор.Следующий() Тогда
		ЗаказКлиента.Договор = ВыборкаДоговор.Ссылка;
	КонецЕсли;
	
	ЗаказКлиента.Подразделение = ЗаказКлиента.Склад.Подразделение;
	ЗаказКлиента.Автор = ПараметрыСеанса.ТекущийПользователь;
	ЗаказКлиента.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ЗаказКлиента.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний",Истина);
	ЗаказКлиента.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		
	УстановкаЦен = Неопределено;
	Для Каждого строкаТовар Из ТаблицаТовары Цикл
		
		новСтрТовар = ЗаказКлиента.Товары.Добавить();
		новСтрТовар.Номенклатура = строкаТовар.Номенклатура;
		новСтрТовар.Упаковка = строкаТовар.Номенклатура.ЕдиницаИзмерения;
		новСтрТовар.КоличествоУпаковок = строкаТовар.Количество;
		новСтрТовар.Количество = строкаТовар.Количество;
		новСтрТовар.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		новСтрТовар.Склад = ЗаказКлиента.Склад;
		новСтрТовар.ВидЦены = ПользовательAPI.ВидЦен;
		новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		стрОстатки = таблицаОстатки.Найти(строкаТовар.Номенклатура);
		Если стрОстатки = Неопределено ИЛИ стрОстатки.Остаток < строкаТовар.Количество Тогда
			
			Если стрОстатки = Неопределено Тогда
				Остаток = 0;
			Иначе
				Остаток = стрОстатки.Остаток;
			КонецЕсли;
			
			массивОшибки.Добавить("На складе недостаточно товара " + строкаТовар.Номенклатура + " (" + строкаТовар.Номенклатура.Код + "). Требуется " + Формат(строкаТовар.Количество,"ЧРГ=; ЧН=0; ЧГ=") + " шт. На складе есть - " + Формат(стрОстатки.Остаток,"ЧРГ=; ЧН=0; ЧГ=") + " шт.");
			
		КонецЕсли;
				
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ЗаказКлиента));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказКлиента.Товары,СтруктураДействий,Неопределено);
	
	Если массивОшибки.Количество() = 0 Тогда
	
		Попытка
			ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОтменитьТранзакцию();
			массивОшибки.Добавить("Неклассифицированная ошибка проведения документа в 1С");
			Возврат Новый Структура("errorCode,errorDescription",103,СтрСоединить(массивОшибки,Символы.ПС));
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ЗаказКлиента.Ссылка;
		
	Иначе
		
		ОтменитьТранзакцию();
		Возврат Новый Структура("errorCode,errorDescription",103,СтрСоединить(массивОшибки,Символы.ПС));
				
	КонецЕсли;
	
КонецФункции
#КонецОбласти

//************************************************
//Общие функции
//************************************************
#Область ОбщиеФункции
Функция ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type","application/json");
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
		
	ЗаписатьJSON(ЗаписьJSON,структураОтвет);
	
	Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть(),КодировкаТекста.UTF8);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	
	Попытка
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		
		структураЗапрос = ПрочитатьJSON(ЧтениеJSON,,"DocDate");
		
		Возврат структураЗапрос;
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос,структураОбязательныхПараметров,ОписаниеОшибок,ПутьКЗначениям = "")
	
	Для Каждого ОбязательныйПараметр Из структураОбязательныхПараметров Цикл
		
		Если НЕ структураЗапрос.Свойство(ОбязательныйПараметр.Ключ) Тогда
			Если ОписаниеОшибок <> "" Тогда
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
			КонецЕсли;
			ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Отсутствует обязательный параметр " + ОбязательныйПараметр.Ключ;
			Продолжить;
		КонецЕсли;
		
		ПроверяемоеЗначение = структураЗапрос[ОбязательныйПараметр.Ключ];
		
		Если Тип(ОбязательныйПараметр.Значение) = Тип("Структура") Тогда
			
			Если ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") Тогда
				
				Для Н = 0 По ПроверяемоеЗначение.Количество() - 1 Цикл
					
					ПроверитьЗаполненностьОбязательныхПараметров(ПроверяемоеЗначение[Н],ОбязательныйПараметр.Значение,ОписаниеОшибок,ПутьКЗначениям + ОбязательныйПараметр.Ключ + "[" + Н + "].");	
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
				
				ПроверитьЗаполненностьОбязательныхПараметров(ПроверяемоеЗначение,ОбязательныйПараметр.Значение,ОписаниеОшибок,ПутьКЗначениям + ОбязательныйПараметр.Ключ + ".");
				
			Иначе
				Если ОписаниеОшибок <> "" Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
				КонецЕсли;
				ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", в этом параметре должен быть массив или структура";
				Продолжить;
			КонецЕсли;
			
		Иначе
								
			Если ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") Тогда
				
				Для Каждого ПроверяемыйЭлемент Из ПроверяемоеЗначение Цикл
					
					Если ТипЗнч(ПроверяемыйЭлемент) <> Тип(ОбязательныйПараметр.Значение) Тогда
				
						Если ОписаниеОшибок <> "" Тогда
							ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
						КонецЕсли;
						ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа " + ОбязательныйПараметр.Значение;
						Прервать;
				
					КонецЕсли;	
					
				КонецЦикла;
				
			ИначеЕсли Тип(ОбязательныйПараметр.Значение) = Тип("УникальныйИдентификатор") Тогда
				
				Попытка
					УИД = Новый УникальныйИдентификатор(ПроверяемоеЗначение);
				Исключение
					Если ОписаниеОшибок <> "" Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
					КонецЕсли;
					ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа УникальныйИдентификатор";
					Продолжить;		
				КонецПопытки;
				
			ИначеЕсли ТипЗнч(ПроверяемоеЗначение) <> Тип(ОбязательныйПараметр.Значение) Тогда
				
				Если ОписаниеОшибок <> "" Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
				КонецЕсли;
				ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа " + ОбязательныйПараметр.Значение;
				Продолжить;	
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

//************************************************
//Обработчики запросов
//************************************************
#Область ОбработчикиЗапросов
Функция VersionGET(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
	
	УстановитьПривилегированныйРежим(Истина);
	мсвРасширений = РасширенияКонфигурации.Получить(Новый Структура("Имя","РасширениеAPI"));
	
	Если мсвРасширений.Количество() = 0 Тогда
		Версия = "Не установлено";
	КонецЕсли;	
	
	Версия = мсвРасширений[0].Версия;
	
	структураОтвет.Вставить("Version",Версия);
		
	структураОтвет.Вставить("ConfigurationVersion",Метаданные.Версия);
	СисИнфо = Новый СистемнаяИнформация;	
	структураОтвет.Вставить("PlatformVersion",СисИнфо.ВерсияПриложения);
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	
КонецФункции

Функция TyresGET(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
		
	Попытка
	
		Попытка
		
			структураПараметры = Новый Структура;
			
			Для Каждого Параметр Из Запрос.ПараметрыЗапроса Цикл
				
				Если ТипЗнч(Параметр.Ключ) = Тип("Строка") Тогда
					
					структураПараметры.Вставить(Параметр.Ключ,Параметр.Значение);		
					
				КонецЕсли;
					
			КонецЦикла;
			
		Исключение
			
			структураОтвет.errorCode = 601;
			структураОтвет.errorDescription = "Не удалось разобрать строку с параметрами";
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
			
		КонецПопытки; 
		
		структураОбязательныхПараметров = Новый Структура("key","Строка");
		ОписаниеОшибок = "";
		ПроверитьЗаполненностьОбязательныхПараметров(структураПараметры,структураОбязательныхПараметров,ОписаниеОшибок);
				
		Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
			структураОтвет.errorCode = 602;
			структураОтвет.errorDescription = ОписаниеОшибок;
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
		КонецЕсли;
		
		ПользовательAPI = ПолучитьПользователяAPI(структураПараметры.key);
		
		Если ПользовательAPI.Пустая() Тогда
			структураОтвет.errorCode = 603;
			структураОтвет.errorDescription = "В запросе передан неверный ключ API";
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		КонецЕсли;
				
		структураОтвет.Вставить("tyres",СформироватьСтруктуруСШинами(ПользовательAPI,структураПараметры,Истина));
				
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	Исключение
		
		структураОтвет.errorCode = 666;
		структураОтвет.errorDescription = "Неизвестная ошибка";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
		
	КонецПопытки;		
	
КонецФункции 

Функция WarehousesGET(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
		
	Попытка
	
		Попытка
		
			структураПараметры = Новый Структура;
			
			Для Каждого Параметр Из Запрос.ПараметрыЗапроса Цикл
				
				Если ТипЗнч(Параметр.Ключ) = Тип("Строка") Тогда
					
					структураПараметры.Вставить(Параметр.Ключ,Параметр.Значение);		
					
				КонецЕсли;
					
			КонецЦикла;
			
		Исключение
			
			структураОтвет.errorCode = 601;
			структураОтвет.errorDescription = "Не удалось разобрать строку с параметрами";
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
			
		КонецПопытки; 
		
		структураОбязательныхПараметров = Новый Структура("key","Строка");
		ОписаниеОшибок = "";
		ПроверитьЗаполненностьОбязательныхПараметров(структураПараметры,структураОбязательныхПараметров,ОписаниеОшибок);
				
		Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
			структураОтвет.errorCode = 602;
			структураОтвет.errorDescription = ОписаниеОшибок;
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
		КонецЕсли;
		
		ПользовательAPI = ПолучитьПользователяAPI(структураПараметры.key);
		
		Если ПользовательAPI.Пустая() Тогда
			структураОтвет.errorCode = 603;
			структураОтвет.errorDescription = "В запросе передан неверный ключ API";
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		КонецЕсли;
		
		структураОтвет.Вставить("warehouses",СформироватьСтруктуруСоСкладами(ПользовательAPI));
		
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	Исключение
		
		структураОтвет.errorCode = 666;
		структураОтвет.errorDescription = "Неизвестная ошибка";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
		
	КонецПопытки;	
	
КонецФункции

Функция OrdersPOST(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
	
	структураЗапрос = ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	
	Если структураЗапрос = Неопределено Тогда
		
		структураОтвет.errorCode = 601;
		структураОтвет.errorDescription = "Ошибка парсинга JSON тела запроса";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	структураОбязательныхПараметров = Новый Структура("key,warehouse,goods","Строка","УникальныйИдентификатор",Новый Структура("id,quantity","Строка","Число"));
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос,структураОбязательныхПараметров,ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
		структураОтвет.errorCode = 602;
		структураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	ПользовательAPI = ПолучитьПользователяAPI(структураЗапрос.key);
		
	Если ПользовательAPI.Пустая() Тогда
		структураОтвет.errorCode = 603;
		структураОтвет.errorDescription = "В запросе передан неверный ключ API";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	КонецЕсли;
	
	РезультатСоздания = СоздатьЗаказ(ПользовательAPI,структураЗапрос);
	
	
	Если ТипЗнч(РезультатСоздания) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		структураОтвет.Вставить("number",РезультатСоздания.Номер);		
		структураОтвет.Вставить("date",РезультатСоздания.Дата);
		структураОтвет.Вставить("sum",РезультатСоздания.СуммаДокумента);

		
		мсвТовары = Новый Массив;		
		Для Каждого стрТовар Из РезультатСоздания.Товары Цикл
			
			структураСтрокаТовар = Новый Структура;
			структураСтрокаТовар.Вставить("id",Строка(стрТовар.Номенклатура.УникальныйИдентификатор()));
			структураСтрокаТовар.Вставить("quantity",стрТовар.КоличествоУпаковок);
			структураСтрокаТовар.Вставить("price",стрТовар.Цена);
			структураСтрокаТовар.Вставить("sum",стрТовар.Сумма);
			мсвТовары.Добавить(структураСтрокаТовар);
			
		КонецЦикла;
		
		структураОтвет.Вставить("goods",мсвТовары);
		
	ИначеЕсли ТипЗнч(РезультатСоздания) = Тип("Структура") Тогда
		структураОтвет.errorCode = РезультатСоздания.errorCode;
		структураОтвет.errorDescription = РезультатСоздания.errorDescription;			
	КонецЕсли;
	
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	
КонецФункции


Функция TyresBrandsGET(Запрос)
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
		
	Попытка
	
		Попытка
		
			структураПараметры = Новый Структура;
			
			Для Каждого Параметр Из Запрос.ПараметрыЗапроса Цикл
				
				Если ТипЗнч(Параметр.Ключ) = Тип("Строка") Тогда
					
					структураПараметры.Вставить(Параметр.Ключ,Параметр.Значение);		
					
				КонецЕсли;
					
			КонецЦикла;
			
		Исключение
			
			структураОтвет.errorCode = 601;
			структураОтвет.errorDescription = "Не удалось разобрать строку с параметрами";
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
			
		КонецПопытки; 
		
		структураОбязательныхПараметров = Новый Структура("key","Строка");
		ОписаниеОшибок = "";
		ПроверитьЗаполненностьОбязательныхПараметров(структураПараметры,структураОбязательныхПараметров,ОписаниеОшибок);
				
		Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
			структураОтвет.errorCode = 602;
			структураОтвет.errorDescription = ОписаниеОшибок;
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
		КонецЕсли;
		
		ПользовательAPI = ПолучитьПользователяAPI(структураПараметры.key);
		
		Если ПользовательAPI.Пустая() Тогда
			структураОтвет.errorCode = 603;
			структураОтвет.errorDescription = "В запросе передан неверный ключ API";
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		КонецЕсли;
		
		структураОтвет.Вставить("brands",СформироватьСтруктуруБрендовМоделей());
		
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	Исключение
		
		структураОтвет.errorCode = 666;
		структураОтвет.errorDescription = "Неизвестная ошибка";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
		
	КонецПопытки;
КонецФункции
#КонецОбласти