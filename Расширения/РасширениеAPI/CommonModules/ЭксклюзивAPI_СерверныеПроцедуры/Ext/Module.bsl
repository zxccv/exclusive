Функция СтруктуруВJSON(структура)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
		
	ЗаписатьJSON(ЗаписьJSON,структура);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JSONВСтруктуру(JSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
		
	структура = ПрочитатьJSON(ЧтениеJSON);
		
	Возврат структура;
	
КонецФункции

Функция НайтиСоздатьКонтрагента(Партнер,структураПокупатель)
	
	НаименованиеКонтрагента = структураПокупатель.name;
	НаименованиеКонтрагента = НаименованиеКонтрагента + " " + структураПокупатель.phone;
		
	ЗапросКонтрагент = Новый Запрос;
	ЗапросКонтрагент.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|	И Контрагенты.Наименование = &Наименование";
	
	ЗапросКонтрагент.УстановитьПараметр("Партнер",Партнер);
	ЗапросКонтрагент.УстановитьПараметр("Наименование",НаименованиеКонтрагента);
	
	ВыборкаКонтрагент = ЗапросКонтрагент.Выполнить().Выбрать();
	
	Если ВыборкаКонтрагент.Следующий() Тогда		
		Контрагент = ВыборкаКонтрагент.Ссылка.ПолучитьОбъект();
	Иначе		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Контрагент.Партнер = Партнер;
		
		СсылкаНового = Справочники.Контрагенты.ПолучитьСсылку();
		Контрагент.УстановитьСсылкуНового(СсылкаНового);
		Контрагент.ГоловнойКонтрагент = СсылкаНового;
	КонецЕсли;
	
	Контрагент.Наименование = НаименованиеКонтрагента;
	Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Контрагент.НаименованиеПолное = Контрагент.Наименование;
	Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
	
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент,структураПокупатель.phone,Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент,структураПокупатель.email,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;	
	
КонецФункции

Процедура СоздатьЗаказ4kolesa(структураЗаказ) Экспорт
	
	ТаблицаСоглашенийИДоговоров = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("СоглашенияДоговорыИнтернетЗаказов",Истина,Ложь);
	
	мзЗагрузкаЗаказов = РегистрыСведений.Экс_ЗагрузкаЗаказовAPI.СоздатьМенеджерЗаписи();
	НомерЗаказа = Формат(структураЗаказ.order_id,"ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
	
	структураРезультат = Новый Структура;
	
	структураРезультат.Вставить("errorCode",0);
	структураРезультат.Вставить("errorDescription","");
	структураРезультат.Вставить("order_id",структураЗаказ.order_id);
	//Самойлов А.С. Начало 2018-06-20 #
	структураРезультат.Вставить("order_1c_number","");
	//Самойлов А.С. Конец  2018-06-20
	//Самойлов А.С. Начало 2018-10-19 #1163
	структураРезультат.Вставить("order_id_full","");
	//Самойлов А.С. Конец  2018-10-19
	
	настройкиЗагрузкиЗаказов = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("ЗагрузкаЗаказов4kolesa");
	
	НачатьТранзакцию();
	
	мзЗагрузкаЗаказов.Сайт = структураЗаказ.site;
	мзЗагрузкаЗаказов.НомерЗаказа = НомерЗаказа;
	мзЗагрузкаЗаказов.ДатаВремя = ТекущаяДата(); 
	
	Попытка
		массивОшибки = Новый Массив;
		
		Партнер = настройкиЗагрузкиЗаказов.Партнер;
		Контрагент = НайтиСоздатьКонтрагента(Партнер,структураЗаказ.client);		
		Менеджер = настройкиЗагрузкиЗаказов.Менеджер;
		
		Если структураЗаказ.delivery.type = "pickup" Тогда		
			Если НЕ ЗначениеЗаполнено(структураЗаказ.delivery.store_id) Тогда
				
				ОтменитьТранзакцию();		
			
				структураРезультат.errorCode = 101;
				структураРезультат.errorDescription = "Выбран самовывоз, но склад не заполнен";
				
				мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
				мзЗагрузкаЗаказов.Успешно = Ложь;
				мзЗагрузкаЗаказов.Записать();
				Возврат;
				
			КонецЕсли;
			Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(структураЗаказ.delivery.store_id));		
		Иначе
			Склад = настройкиЗагрузкиЗаказов.СкладОтправкиДоставки;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(Склад.Наименование) Тогда
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 101;
			структураРезультат.errorDescription = "Не найден склад с идентификатором " + структураЗаказ.delivery.store_id;
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			Возврат;
		КонецЕсли;
		
			
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ТаблицаТовары.Колонки.Добавить("Цена");
		
		Для Каждого данныеСтрокиЗаказа Из структураЗаказ.goods Цикл
				
			новТовар = ТаблицаТовары.Добавить();
			новТовар.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(данныеСтрокиЗаказа.good_id));
			новТовар.Количество = Число(данныеСтрокиЗаказа.quantity);
			новТовар.Цена = Число(данныеСтрокиЗаказа.price);
			                        		
			Если НЕ ЗначениеЗаполнено(новТовар.Номенклатура.Наименование) Тогда
				массивОшибки.Добавить("Не найден товар с идентификатором " + данныеСтрокиЗаказа.good_id);
			КонецЕсли;
				
		КонецЦикла;
		
		Если массивОшибки.Количество() Тогда		
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 102;
			структураРезультат.errorDescription = СтрСоединить(массивОшибки,Символы.ПС);
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			Возврат;
			
		КонецЕсли;
			
		ЗапросОстатки = Новый Запрос;
		ЗапросОстатки.Текст =
		"ВЫБРАТЬ
		|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
		|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
		|	ВЫБОР КОГДА Склад = &Склад ТОГДА
		|		0 ИНАЧЕ 1 КОНЕЦ КАК ПриоритетСклада,
		|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(
		|			&ДатаДокумента,
		|			Номенклатура В (&Номенклатура)) КАК СвободныеОстаткиОстатки
		|ГДЕ
		|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток > 0
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетСклада";
		
		ЗапросОстатки.УстановитьПараметр("ДатаДокумента",ТекущаяДата());
		ЗапросОстатки.УстановитьПараметр("Номенклатура",ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
		ЗапросОстатки.УстановитьПараметр("Склад",Склад);
		
		таблицаОстаткиСХарактеристиками = ЗапросОстатки.Выполнить().Выгрузить();
		
		таблицаОстатки = таблицаОстаткиСХарактеристиками.Скопировать();
		таблицаОстатки.Свернуть("Номенклатура","Остаток");
		
		ЗаказКлиентаСсылка = Документы.ЗаказКлиента.НайтиПоРеквизиту("НомерПоДаннымКлиента","4kolesa.spb.ru/"+НомерЗаказа);
		
		Если НЕ ЗаказКлиентаСсылка.Пустая() Тогда
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 105;
			структураРезультат.errorDescription = "Заказ с номером " + НомерЗаказа + " уже загружен в 1с";
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			Возврат;	
			
		КонецЕсли;
		
		ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
		
		ЗаказКлиента.Комментарий = "Загружен с сайта 4kolesa.spb.ru";
		
		Если структураЗаказ.Свойство("comment") Тогда
			ЗаказКлиента.Комментарий = ЗаказКлиента.Комментарий + Символы.ПС + структураЗаказ.comment;
		КонецЕсли;
		
		ЗаказКлиента.НомерПоДаннымКлиента = "4kolesa.spb.ru/"+НомерЗаказа;
		
		ЗаказКлиента.Дата = ТекущаяДата();
		ЗаказКлиента.Партнер = Партнер;
		ЗаказКлиента.Контрагент = Контрагент;
		
		//Самойлов А.С. Начало 2018-07-10 #2330
		//Организация = Экс_ОбщегоНазначенияСервер.ПолучитьЗначениеДопРеквизитаОбъекта(Склад, "Организация");		
		//Если НЕ ЗначениеЗаполнено(Организация) Тогда
		//Самойлов А.С. Конец  2018-07-10
			Организация = Справочники.Организации.НайтиПоНаименованию("Эксклюзив СПб",Истина);
		//Самойлов А.С. Начало 2018-07-10 #2330
		//КонецЕсли;
		//Самойлов А.С. Конец  2018-07-10
			
		ЗаказКлиента.Организация = Организация;
		ЗаказКлиента.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			
		НайденныеСтрокиСоглашенияДоговоры = ТаблицаСоглашенийИДоговоров.НайтиСтроки(Новый Структура("Организация, ТипОплаты",ЗаказКлиента.Организация, 0));
		
		Если НайденныеСтрокиСоглашенияДоговоры.Количество() > 0 Тогда
			
			ЗаказКлиента.Соглашение = НайденныеСтрокиСоглашенияДоговоры[0].Соглашение;		
			НаименованиеДоговора = НайденныеСтрокиСоглашенияДоговоры[0].Договор.Наименование;
			
			ЗапросДоговор = Новый Запрос;
			ЗапросДоговор.Текст =
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Контрагент = &Контрагент
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Наименование = &Наименование";
			
			ЗапросДоговор.УстановитьПараметр("Контрагент",ЗаказКлиента.Контрагент);
			ЗапросДоговор.УстановитьПараметр("Организация",ЗаказКлиента.Организация);
			ЗапросДоговор.УстановитьПараметр("Наименование",НаименованиеДоговора);
			
			ВыборкаДоговор = ЗапросДоговор.Выполнить().Выбрать();
			
			Если ВыборкаДоговор.Следующий() Тогда
				ЗаказКлиента.Договор = ВыборкаДоговор.Ссылка;
			Иначе
				Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				ДанныеЗаполнения = Новый Структура("Партнер,Контрагент,Организация,Валюта");
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения,ЗаказКлиента);
				
				Договор.Заполнить(ДанныеЗаполнения);
				Договор.Наименование = НаименованиеДоговора;
				Договор.Менеджер = Менеджер;
				Договор.НаименованиеДляПечати = Договор.Наименование;
				Договор.Номер = "Л";
				Договор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
				Договор.Согласован = Истина;
				Договор.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата от клиента легкового");
				Договор.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным;
				
				//Самойлов А.С. Начало 2018-06-26 #2151
				новСтрДопРеквизит = Договор.ДополнительныеРеквизиты.Добавить();
				новСтрДопРеквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ЛегковойОтдел");
				новСтрДопРеквизит.Значение = Истина;
				//Самойлов А.С. Конец  2018-06-26
				
				Договор.Записать();
				
				ЗаказКлиента.Договор = Договор.Ссылка;
						
			КонецЕсли;
			
		Иначе
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 103;
			структураРезультат.errorDescription = "Не удалось подобрать соглашение и договор для заказа";
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			Возврат;	
			
		КонецЕсли;
		
		ЗаказКлиента.ГрафикОплаты = Справочники.ГрафикиОплаты.НайтиПоНаименованию("Оплата в рознице, 100% сразу (наличные, карта)",Истина);
		//Притула Р.В. Начало 27.08.2018 #2790
		ЗаказКлиента.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		//Притула Р.В. Конец  27.08.2018
		
		ЗаказКлиента.Склад = Склад;
		ЗаказКлиента.ЦенаВключаетНДС = Истина;
		ЗаказКлиента.Менеджер = Менеджер;
		ЗаказКлиента.НеОтгружатьЧастями = Истина;
		ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ЗаказКлиента.ДатаСогласования = ТекущаяДата();
		ЗаказКлиента.Согласован = Истина;
		ЗаказКлиента.ДатаОтгрузки = ЗаказКлиента.Дата;
		ЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		ЗаказКлиента.СкидкиРассчитаны = Истина;
		ЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		                          	
		ЗаказКлиента.Подразделение = ЗаказКлиента.Склад.Подразделение;
		ЗаказКлиента.Автор = ПараметрыСеанса.ТекущийПользователь;
		ЗаказКлиента.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		ЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ЗаказКлиента.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний",Истина);
		ЗаказКлиента.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		
		Если структураЗаказ.delivery.type = "tk" Тогда
			
			ЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
			Если структураЗаказ.delivery.address.Свойство("house") И ЗначениеЗаполнено(структураЗаказ.delivery.address.house) Тогда
				структураЗаказ.delivery.address.house = "д. " + структураЗаказ.delivery.address.house;
			КонецЕсли;
			
			Если структураЗаказ.delivery.address.Свойство("apartment") И ЗначениеЗаполнено(структураЗаказ.delivery.address.apartment) Тогда
				структураЗаказ.delivery.address.apartment = "кв. " + структураЗаказ.delivery.address.apartment;
			КонецЕсли;
			
			мсвЧастиАдреса = Новый Массив;
			Для Каждого ЧастьАдреса Из структураЗаказ.delivery.address Цикл
				Если ЗначениеЗаполнено(ЧастьАдреса.Значение) Тогда
					мсвЧастиАдреса.Добавить(ЧастьАдреса.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ЗаказКлиента.АдресДоставки = СтрСоединить(мсвЧастиАдреса,",");
			
		КонецЕсли;
		
		Для Каждого строкаТовар Из ТаблицаТовары Цикл
			
			строкиОстатки = таблицаОстаткиСХарактеристиками.НайтиСтроки(Новый Структура("Номенклатура",строкаТовар.Номенклатура));
			
			Если строкиОстатки.Количество() > 0 Тогда
						
				Если строкиОстатки[0].Остаток >= строкаТовар.Количество Тогда
					Количество = строкаТовар.Количество;
					Характеристика = строкиОстатки[0].Характеристика;										
				Иначе
					Количество = строкиОстатки[0].Остаток;
					Характеристика = строкиОстатки[0].Характеристика;
					
					новСтрокаТовар = ТаблицаТовары.Вставить(ТаблицаТовары.Индекс(строкаТовар)+1);
					ЗаполнитьЗначенияСвойств(новСтрокаТовар,строкаТовар);
					строкаТовар.Количество = Количество;
					новСтрокаТовар.Количество = новСтрокаТовар.Количество - Количество;				
				КонецЕсли;
				
				Если строкиОстатки[0].ПриоритетСклада = 0 Тогда
					Обеспечение = Перечисления.ВариантыОбеспечения.СоСклада;
				Иначе
					Обеспечение = Перечисления.ВариантыОбеспечения.Требуется;
				КонецЕсли;
				
				строкиОстатки[0].Остаток = строкиОстатки[0].Остаток - Количество;
				Если строкиОстатки[0].Остаток = 0 Тогда
					таблицаОстаткиСХарактеристиками.Удалить(строкиОстатки[0]);
				КонецЕсли;
				
				новСтрТовар = ЗаказКлиента.Товары.Добавить();
				новСтрТовар.Номенклатура = строкаТовар.Номенклатура;
				новСтрТовар.Характеристика = Характеристика;
				новСтрТовар.Упаковка = строкаТовар.Номенклатура.ЕдиницаИзмерения;
				новСтрТовар.КоличествоУпаковок = Количество;
				новСтрТовар.Количество = Количество;
				новСтрТовар.ВариантОбеспечения = Обеспечение;
				новСтрТовар.Склад = ЗаказКлиента.Склад;
				новСтрТовар.ВидЦены = настройкиЗагрузкиЗаказов.ВидЦен;
				новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							
			Иначе
															
				массивОшибки.Добавить("На складе недостаточно товара " + строкаТовар.Номенклатура + " (" + строкаТовар.Номенклатура.Код + "). Не хватило " + Формат(строкаТовар.Количество,"ЧРГ=; ЧН=0; ЧГ=") + " шт.");
								
			КонецЕсли;
					
		КонецЦикла;
				
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ЗаказКлиента));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказКлиента.Товары,СтруктураДействий,Неопределено);
		
		ЭтапГрафика = ЗаказКлиента.ЭтапыГрафикаОплаты.Добавить();
		//Притула Р.В. Начало 29.08.2018 #2790
		ЭтапГрафика.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
		//Притула Р.В. Конец  29.08.2018
		ЭтапГрафика.ДатаПлатежа = ЗАказКлиента.ДатаОтгрузки;
		ЭтапГрафика.ПроцентПлатежа = 100;
		ЭтапГрафика.СуммаПлатежа = ЗаказКлиента.Товары.Итог("СуммаСНДС");
		  		
		Для Каждого стрТовар Из ЗаказКлиента.Товары Цикл
			
			Если стрТовар.Цена <> ТаблицаТовары[ЗаказКлиента.Товары.Индекс(стрТовар)].Цена Тогда
				
				массивОшибки.Добавить("Для товара " + стрТовар.Номенклатура + " (" + стрТовар.Номенклатура.Код + ") не совпадают цены. Розничная цена " + Формат(стрТовар.Цена,"ЧРГ=; ЧН=0; ЧГ=") + " руб., цена из интернет-магазина " + Формат(ТаблицаТовары[ЗаказКлиента.Товары.Индекс(стрТовар)].Цена,"ЧРГ=; ЧН=0; ЧГ=") + " руб.");
							
			КонецЕсли;
			
		КонецЦикла;
		
		Если массивОшибки.Количество() = 0 Тогда
		
			Попытка
				ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОтменитьТранзакцию();
				массивОшибки.Добавить("Неклассифицированная ошибка проведения документа в 1С");			
				
				структураРезультат.errorCode = 104;
				структураРезультат.errorDescription = СтрСоединить(массивОшибки,Символы.ПС);
				
				мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
				мзЗагрузкаЗаказов.Успешно = Ложь;
				мзЗагрузкаЗаказов.Записать();
				Возврат;		
			КонецПопытки;
			
			ЗафиксироватьТранзакцию();
			
			//Самойлов А.С. Начало 2018-06-18 #
			Если настройкиЗагрузкиЗаказов.Свойство("АдресДляОповещения") И ЗначениеЗаполнено(настройкиЗагрузкиЗаказов.АдресДляОповещения) Тогда
				Экс_ОбщегоНазначенияСервер.СоздатьИсходящееПисьмо(настройкиЗагрузкиЗаказов.АдресДляОповещения,"Загружен новый заказ с 4kolesa.spb.ru. Номер " + ЗаказКлиента.Номер,"Загружен новый заказ с 4kolesa.spb.ru. Номер " + ЗаказКлиента.Номер);
			КонецЕсли;
			//Самойлов А.С. Конец  2018-06-18
			
			//Самойлов А.С. Начало 2018-06-20 #
			структураРезультат.order_1c_number = Лев(ЗаказКлиента.Номер,2) + Формат(Число(Сред(ЗаказКлиента.Номер,6)),"ЧЦ=6; ЧДЦ=; ЧГ=0");
			//Самойлов А.С. Конец  2018-06-20
			
			//Самойлов А.С. Начало 2018-10-19 #1163
			структураРезультат.order_id_full = Строка(ЗаказКлиента.Ссылка.УникальныйИдентификатор());
			//Самойлов А.С. Конец  2018-10-19
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Истина;
			мзЗагрузкаЗаказов.Записать();
			Возврат;
			
		Иначе
			
			ОтменитьТранзакцию();
			структураРезультат.errorCode = 104;
			структураРезультат.errorDescription = СтрСоединить(массивОшибки,Символы.ПС);
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();		
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		массивОшибки.Добавить("Неклассифицированная ошибка проведения документа в 1С");
		массивОшибки.Добавить(ОписаниеОшибки());
		
		структураРезультат.errorCode = 104;
		структураРезультат.errorDescription = СтрСоединить(массивОшибки,Символы.ПС);
		
		мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
		мзЗагрузкаЗаказов.Успешно = Ложь;
		мзЗагрузкаЗаказов.Записать();	
	КонецПопытки;
	
КонецПроцедуры

//Самойлов А.С. Начало 2018-09-05 #2898
//Притула Р.В. Начало 24.04.2018 #1466
Процедура ПрименитьПромокод(ЗаказОбъект, Промокод, ПрименяемСкидку = Истина)
	
	Промокод = ВРег(Промокод);
	
	//1. проверим, использовался ли промокод ранее
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Экс_Промокоды.Промокод КАК Промокод,
	               |	Экс_Промокоды.Скидка КАК Скидка,
	               |	Экс_Промокоды.Использован КАК Использован
	               |ИЗ
	               |	РегистрСведений.Экс_Промокоды КАК Экс_Промокоды
	               |ГДЕ
	               |	Экс_Промокоды.Промокод = &Промокод";
	
	Запрос.УстановитьПараметр("Промокод", Промокод);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;		
	ИначеЕсли Результат[0].Использован Тогда	
		Возврат;
	Иначе
		РазмерСкидки = Результат[0].Скидка;
		//Притула Р.В. Начало 27.04.2018 #1460.6
		//нужно исключать скидки по карте лояльности 3%, если это пормокод Кордиант
		Если Не ПрименяемСкидку Тогда
			ПрименяемСкидку = Истина;
			Возврат;
		КонецЕсли;	
		//Притула Р.В. Конец  27.04.2018
	КонецЕсли;	
		
	//2. если нет - установим скидку
	СкидкаПрименена = Ложь;
	УстановитьСкидкуПоПромокоду(ЗаказОбъект, РазмерСкидки, СкидкаПрименена);
	
	//Притула Р.В. Начало 27.04.2018 #1460.6
	// в любом случае считаем промокод использованным, даже если его не к чему было применить в заказе.
	//
	//Если Не СкидкаПрименена Тогда
	//	Возврат;
	//КонецЕсли;	
	//Притула Р.В. Конец  27.04.2018
	
	//3. зафиксируем использование промокода
	Экс_ОбщегоНазначенияСервер.ЗафиксироватьИспользованиеПромокода(Промокод);
	
	//4. заполним доп. реквизит и запишем заказ
	Экс_ОбщегоНазначенияСервер.УстановитьЗначениеДопРеквизита(ЗаказОбъект,"Промокод Кордиант",Промокод,ложь);

КонецПроцедуры

Процедура УстановитьСкидкуПоПромокоду(ЗаказОбъект, Скидка, СкидкаПрименена = ложь)
	
	Для Каждого СтрокаТЧ Из ЗаказОбъект.Товары Цикл
		                      
		Если СтрокаТЧ.Отменено Тогда
			Продолжить;
		//Притула Р.В. Начало 27.04.2018 #1460.6	
		//ИначеЕсли СтрокаТЧ.Номенклатура.Производитель.Наименование <> "Cordiant" Тогда
		ИначеЕсли ПроверитьУсловияПоПромокоду(СтрокаТЧ.Номенклатура) Тогда
		//Притула Р.В. Конец  27.04.2018
			Продолжить;		
		Иначе
			СкидкаПрименена = Истина;
		КонецЕсли;	
		
		//СтрокаТЧ.ПроцентАвтоматическойСкидки = СтрокаТЧ.ПроцентАвтоматическойСкидки + Скидка;
		СтрокаТЧ.ПроцентАвтоматическойСкидки = Скидка;
		СуммаБезСкидки = Окр(СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена,2);				
		СуммаСкидки = Окр(СуммаБезСкидки*Скидка/100,2);
		
		СтрокаТЧ.СуммаАвтоматическойСкидки = СуммаСкидки;
		СтрокаТЧ.СуммаАвтоматическойСкидкиБезВозвратнойТары = СуммаСкидки;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТЧ.СуммаБезВозвратнойТары = СтрокаТЧ.Сумма;
		
		ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
	
		Если ЗаказОбъект.ЦенаВключаетНДС Тогда
			СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма * ПроцентНДС / (ПроцентНДС + 1);
		Иначе
			СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма * ПроцентНДС;
		КонецЕсли;
		
		СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(ЗаказОбъект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				
	КонецЦикла;
	
КонецПроцедуры
//Притула Р.В. Конец  24.04.2018

//Притула Р.В. Начало 27.04.2018 #1460.6
Функция ПроверитьУсловияПоПромокоду(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НоменклатураДополнительныеРеквизиты.Свойство.Заголовок = ""Бренд""
	               |				ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
	               |		КОНЕЦ) КАК Бренд,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НоменклатураДополнительныеРеквизиты.Свойство.Заголовок = ""Модель легковой шины""
	               |				ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
	               |		КОНЕЦ) КАК Модель,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НоменклатураДополнительныеРеквизиты.Свойство.Заголовок = ""Диаметр обода, R, дюйм""
	               |				ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
	               |		КОНЕЦ) КАК Диаметр,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НоменклатураДополнительныеРеквизиты.Свойство.Заголовок = ""Сезонность""
	               |				ТОГДА НоменклатураДополнительныеРеквизиты.Значение.Наименование
	               |		КОНЕЦ) КАК Сезонность
	               |ПОМЕСТИТЬ ВТ_ДопРеквизиты
	               |ИЗ
	               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |ГДЕ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НоменклатураДополнительныеРеквизиты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДопРеквизиты.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_ДопРеквизиты КАК ВТ_ДопРеквизиты
	               |ГДЕ
	               |	ВТ_ДопРеквизиты.Бренд = ""Cordiant""
	               |	И (ВТ_ДопРеквизиты.Диаметр = ""16""
	               |			ИЛИ ВТ_ДопРеквизиты.Диаметр = ""17""
	               |			ИЛИ ВТ_ДопРеквизиты.Диаметр = ""18"")
	               |	И (ВТ_ДопРеквизиты.Модель = ""Comfort 2""
	               |			ИЛИ ВТ_ДопРеквизиты.Модель = ""All Terrain""
	               |			ИЛИ ВТ_ДопРеквизиты.Модель = ""Road Runner""
	               |			ИЛИ ВТ_ДопРеквизиты.Модель = ""Sport 3""
	               |			ИЛИ ВТ_ДопРеквизиты.Модель = ""Off Road OS-501"")
	               |	И ВТ_ДопРеквизиты.Сезонность = ""Летние""";
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции
//Притула Р.В. Конец  27.04.2018

//Притула Р.В. Начало 25.06.2018 #1976
Процедура СформироватьЗаказыНаПеремещениеНаСкладЗаказа(Заказ1сОбъект, ТаблицаСкладов, НомерЗаказаСайта, ВсеОбеспечили)
	
	ОсновнойСклад = Заказ1сОбъект.Склад;
	
	НайдененныеСтроки = ТаблицаСкладов.НайтиСтроки(Новый Структура("ОсновнойСклад", ОсновнойСклад));
	
	Если НайдененныеСтроки.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСкладов = НайдененныеСтроки[0].Склады.ВыгрузитьЗначения();
	
	ТаблицаТоваров = Заказ1сОбъект.Товары.Выгрузить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Характеристика КАК Характеристика,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&ТаблицаТоваров КАК Товары
	               |ГДЕ
	               |	Товары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Характеристика КАК Характеристика,
	               |	Товары.Количество - (ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК КоличествоОбеспечить,
	               |	Товары.Упаковка КАК Упаковка
	               |ПОМЕСТИТЬ ТоварыКОбеспечению
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &ОсновнойСклад) КАК СвободныеОстаткиОстатки
	               |		ПО Товары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |			И Товары.Характеристика = СвободныеОстаткиОстатки.Характеристика
	               |ГДЕ
	               |	Товары.Количество - (ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыКОбеспечению.Номенклатура КАК Номенклатура,
	               |	ТоварыКОбеспечению.Характеристика КАК Характеристика,
	               |	СвободныеОстаткиОстатки.Склад КАК Склад,
	               |	ТоварыКОбеспечению.КоличествоОбеспечить КАК КоличествоОбеспечить,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК СвободныйОстаток,
	               |	ТоварыКОбеспечению.Упаковка КАК Упаковка,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) - ТоварыКОбеспечению.КоличествоОбеспечить >= 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТовараДостаточно
	               |ИЗ
	               |	ТоварыКОбеспечению КАК ТоварыКОбеспечению
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&МассивСкладов)) КАК СвободныеОстаткиОстатки
	               |		ПО ТоварыКОбеспечению.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	               |			И ТоварыКОбеспечению.Характеристика = СвободныеОстаткиОстатки.Характеристика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СкладСоВсемиТоварами = Неопределено;
	
	Если Результат.Количество() = 0 Тогда
		//если всё удачно зарезервировано при загрузке заказа
		//Притула Р.В. Начало 12.07.2018 #1976
		ВсеОбеспечили = Истина;
		//Притула Р.В. Конец  12.07.2018
		Возврат;
	Иначе
		
		//Притула Р.В. Начало 02.08.2018 #2528
		//нужно переопределить массив складов
		МС = Новый Массив;
		МС.Добавить(ОсновнойСклад);
		Для Каждого С из МассивСкладов Цикл
			МС.Добавить(С);
		КонецЦикла;	
		МассивСкладов = МС;
		//Притула Р.В. Конец  02.08.2018
		
		Для Каждого Склад Из МассивСкладов Цикл
			ПроверкаНаличия = Результат.НайтиСтроки(Новый Структура("Склад", Склад));
			//Притула Р.В. Начало 27.08.2018 #2795
			//ТовараНедостаточно = Ложь;
			ТовараНедостаточно = ПроверкаНаличия.Количество() = 0;
			//Притула Р.В. Конец  27.08.2018
			Для Каждого Стр Из ПроверкаНаличия Цикл
				Если Не Стр.ТовараДостаточно Тогда
					ТовараНедостаточно = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если ТовараНедостаточно Тогда
				Продолжить;
			Иначе
				СкладСоВсемиТоварами = Склад;
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;	
	
	Если СкладСоВсемиТоварами = Неопределено Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ1сОбъект);			
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");		
		
		Для каждого Склад Из МассивСкладов Цикл
			
			//ищем товары, которые можно обеспечить с текущего склада
			ТоварыКОбеспечению = Результат.НайтиСтроки(Новый Структура("Склад", Склад));	
			
			Если ТоварыКОбеспечению.Количество() > 0 Тогда
				
				Если Склад = Заказ1сОбъект.Склад Тогда
					
					//выделим то, что можно обеспечить со склада заказа
					Для каждого Стр из ТоварыКОбеспечению Цикл
						
						//Притула Р.В. Начало 02.08.2018 #2528
						Если Стр.СвободныйОстаток = 0 Тогда
							Продолжить;
						КонецЕсли;	
						//Притула Р.В. Конец  02.08.2018
						
						СтрокаТоваров = Заказ1сОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Стр.Номенклатура, Стр.Характеристика))[0];
						ВыделяемоеКоличество = СтрокаТоваров.Количество - Стр.СвободныйОстаток;
						СтрокаТоваров.Количество = Стр.СвободныйОстаток;
						СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, СтруктураДействий, Неопределено);
						
						НовСтр = Заказ1сОбъект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваров, ,"НомерСтроки, КодСтроки, КлючСвязи");
						НовСтр.Количество = ВыделяемоеКоличество;
						НовСтр.КоличествоУпаковок = НовСтр.Количество;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НовСтр, СтруктураДействий, Неопределено);
						
						УменьшитьКоличествоКОбеспечению(Результат, СтрокаТоваров,,Стр.СвободныйОстаток);
						
					КонецЦикла;	
					
				Иначе	
					
					ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
					ЗаказНаПеремещение.Заполнить(Новый Структура("Основание, Склад",Заказ1сОбъект.Ссылка, Заказ1сОбъект.Склад));
					ЗаказНаПеремещение.Товары.Очистить();
					ЗаказНаПеремещение.СкладОтправитель = Склад;
					ЗаказНаПеремещение.Дата = ТекущаяДата();
					
					Для каждого Стр из ТоварыКОбеспечению Цикл
						
						КоличествоКПеремещению = 0;
						УменьшитьКоличествоКОбеспечению(Результат, Стр, Склад, КоличествоКПеремещению); 
						
						Если КоличествоКПеремещению <> 0 Тогда
							Товар = ЗаказНаПеремещение.Товары.Добавить();
							Товар.Номенклатура = Стр.Номенклатура;
							Товар.Характеристика = Стр.Характеристика;
							Товар.Упаковка = Стр.Упаковка;
							Товар.Количество = КоличествоКПеремещению;
							Товар.КоличествоУпаковок = КоличествоКПеремещению;
							Товар.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
							Товар.НачалоОтгрузки = ЗаказНаПеремещение.Дата;
						КонецЕсли;	
							
					КонецЦикла;
					
					Если ЗаказНаПеремещение.Товары.Количество() > 0 Тогда
						Попытка
							ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);			
						Исключение
							ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Запись);			
						КонецПопытки;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
	
	Иначе
		Заказ1сОбъект.Склад = СкладСоВсемиТоварами;
		Для каждого Стр из Заказ1сОбъект.Товары Цикл
			Стр.Склад = СкладСоВсемиТоварами;
		КонецЦикла;	
	КонецЕсли;	
	
	//заполним обеспечение
	ПереченьВариантов = Новый Массив();
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);			
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.Требуется);						

	ИндексыСтрок = Новый Массив();
	Для Индекс = 0 По Заказ1сОбъект.Товары.Количество() - 1 Цикл ИндексыСтрок.Добавить(Индекс) КонецЦикла;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказ1сОбъект.Ссылка);
	
	ПараметрыЗаполнения = МенеджерДокумента.ПараметрыВыбораОбеспечения(Заказ1сОбъект.Статус);
	ТаблицаОбеспечения = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(
		Заказ1сОбъект, ПереченьВариантов, ПараметрыЗаполнения, ИндексыСтрок);
	Если ТипЗнч(ТаблицаОбеспечения) = Тип("ТаблицаЗначений") Тогда
		МенеджерДокумента.ЗаполнитьВариантОбеспечения(Заказ1сОбъект, Неопределено, "ИндексыСтрок", ТаблицаОбеспечения);
	КонецЕсли;
	
	Попытка
	    Заказ1сОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		//Притула Р.В. Начало 12.07.2018 #1976
		ВсеОбеспечили = ?(СкладСоВсемиТоварами = Неопределено, Результат.Итог("КоличествоОбеспечить") = 0, Истина);
		//Притула Р.В. Конец  12.07.2018
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка заказов с сайта.'"),
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + ". Номер заказа " + НомерЗаказаСайта + ", " + Заказ1сОбъект.Ссылка + Символы.ПС + "Ошибка возникла при формировании заказа на перемещение");
	КонецПопытки;
	
КонецПроцедуры 	

Процедура УменьшитьКоличествоКОбеспечению(Результат, Строка, Склад = Неопределено, КоличествоКУменьшению = 0)
	
	ОстаткиОбеспечения = Результат.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура, Строка.Характеристика));
	Для Каждого Ост из ОстаткиОбеспечения Цикл
		Если Ост.Склад = Склад Тогда
			КоличествоКУменьшению = ?(Ост.КоличествоОбеспечить > Ост.СвободныйОстаток, Ост.СвободныйОстаток, Ост.КоличествоОбеспечить);
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если КоличествоКУменьшению = 0 Тогда Возврат; КонецЕсли;
	
	Для каждого Ост из ОстаткиОбеспечения Цикл
		Ост.КоличествоОбеспечить = Ост.КоличествоОбеспечить - КоличествоКУменьшению;
	КонецЦикла;	
	
КонецПроцедуры	
//Притула Р.В. Конец  25.06.2018

//Притула Р.В. Начало 07.11.2018 #2480
Процедура ПроверитьПромокод(Промокод, Товары, ПрименяемПромокод = Истина, СкидкиПоПромокоду)
КонецПроцедуры	
//Притула Р.В. Конец  07.11.2018


Процедура СоздатьЗаказTyresSpbRu(структураЗаказ) Экспорт
	
	ТаблицаСоглашенийИДоговоров = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("СоглашенияДоговорыИнтернетЗаказов",Истина,Ложь);
	
	мзЗагрузкаЗаказов = РегистрыСведений.Экс_ЗагрузкаЗаказовAPI.СоздатьМенеджерЗаписи();
	НомерЗаказа = Формат(структураЗаказ.order_id,"ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
	
	структураРезультат = Новый Структура;
	
	структураРезультат.Вставить("errorCode",0);
	структураРезультат.Вставить("errorDescription","");
	структураРезультат.Вставить("order_id",структураЗаказ.order_id);
	структураРезультат.Вставить("order_1c_number","");
	
	//Самойлов А.С. Начало 2018-10-19 #1163
	структураРезультат.Вставить("order_id_full","");
	//Самойлов А.С. Конец  2018-10-19
	
	настройкиЗагрузкиЗаказов = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("ЗагрузкаЗаказовTyres");
	ТаблицаСкладов = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("ГруппыСкладов",Истина,Ложь);
	ТаблицаНастроек = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("СоглашенияДоговорыИнтернетЗаказов",Истина,Ложь);
	
	НачатьТранзакцию();
	
	мзЗагрузкаЗаказов.Сайт = структураЗаказ.site;
	мзЗагрузкаЗаказов.НомерЗаказа = НомерЗаказа;
	мзЗагрузкаЗаказов.ДатаВремя = ТекущаяДата(); 
	
	Попытка
		ЗаказКлиентаСсылка = Документы.ЗаказКлиента.НайтиПоРеквизиту("НомерПоДаннымКлиента","tyres.spb.ru/"+НомерЗаказа);
		
		Если НЕ ЗаказКлиентаСсылка.Пустая() Тогда
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 105;
			структураРезультат.errorDescription = "Заказ с номером " + НомерЗаказа + " уже загружен в 1с";
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
			Возврат;	
			
		КонецЕсли;
		
		ТипОплаты = НРег(структураЗаказ.paymentType);
		ТипДоставки = НРег(структураЗаказ.delivery.type);
		ВалидныйПромокод = ?(структураЗаказ.promo_valid = 1,Истина,Ложь);
		//Притула Р.В. Начало 07.11.2018 #2480
		//промокоды в разных регистрах должны различаться
		//Промокод = НРег(структураЗаказ.promocode);
		Промокод = структураЗаказ.promocode;
		//Притула Р.В. Конец  07.11.2018
		
		Если ТипДоставки = НРег("Pickup") Тогда		
			Если НЕ ЗначениеЗаполнено(структураЗаказ.delivery.store_id) Тогда
				
				ОтменитьТранзакцию();		
			
				структураРезультат.errorCode = 101;
				структураРезультат.errorDescription = "Выбран самовывоз, но склад не заполнен";
				
				мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
				мзЗагрузкаЗаказов.Успешно = Ложь;
				мзЗагрузкаЗаказов.Записать();
				ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
				Возврат;
				
			КонецЕсли;
			Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(структураЗаказ.delivery.store_id));		
		Иначе
			Склад = настройкиЗагрузкиЗаказов.СкладОтправкиДоставки;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(Склад.Наименование) Тогда
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 101;
			структураРезультат.errorDescription = "Не найден склад с идентификатором " + структураЗаказ.delivery.store_id;
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
			Возврат;
		КонецЕсли;
		
		Партнер = настройкиЗагрузкиЗаказов.Партнер;
		
		Если ТипДоставки = НРег("Pickup") И (ТипОплаты = НРег("CashOrCardOnReceipt") ИЛИ ТипОплаты = НРег("Card")) Тогда
			Контрагент = настройкиЗагрузкиЗаказов.КонтрагентНал;
		Иначе
			Контрагент = настройкиЗагрузкиЗаказов.КонтрагентДоставка;
		КонецЕсли;
		
		Менеджер = настройкиЗагрузкиЗаказов.Менеджер;
		
		ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
		
		ЗаказКлиента.Дата = ТекущаяДата();
		
		ЗаказКлиента.НомерПоДаннымКлиента = "tyres.spb.ru/"+НомерЗаказа;
				
		Если ТипДоставки = НРег("Pickup") И ТипОплаты = НРег("CashOrCardOnReceipt") Тогда
						
			ОрганизацияПоСкладу = Экс_ОбщегоНазначенияСервер.ПолучитьЗначениеДопРеквизитаОбъекта(Склад, "Организация");
			Если ЗначениеЗаполнено(ОрганизацияПоСкладу) Тогда
				ЗаказКлиента.Организация = ОрганизацияПоСкладу;							
			КонецЕсли;	
								
			Если Не ЗначениеЗаполнено(ЗаказКлиента.Организация) Тогда
				ЗаказКлиента.Организация = Справочники.Организации.НайтиПоНаименованию("Эксклюзив Спб",Истина);
			КонецЕсли;	
			
		Иначе
        	ЗаказКлиента.Организация = Справочники.Организации.НайтиПоНаименованию("Эксклюзив",Истина);
		КонецЕсли;
		
		ЗаказКлиента.Партнер = Партнер;
		
		ПрименяемПромокод = Ложь;
		//Притула Р.В. Начало 07.11.2018 #2480
		//ПрименитьПромокод(ЗаказКлиента, Промокод, ПрименяемПромокод);
		СкидкиПоПромокоду = Новый Массив;
		Товары = Новый Массив;
		ПроверитьПромокод(Промокод, Товары, ПрименяемПромокод, СкидкиПоПромокоду);
		//Притула Р.В. Конец  07.11.2018
		
		ЗаказКлиента.Контрагент = Контрагент;
		
		Если ТипДоставки = НРег("Pickup") И ТипОплаты = НРег("CashOrCardOnReceipt") Тогда
			
			//НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(Новый Структура("Организация, ТипОплаты",ЗаказКлиента.Организация, ТипОплаты));
			НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(Новый Структура("Организация",ЗаказКлиента.Организация));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаказКлиента.Соглашение = НайденныеСтроки[0].Соглашение;
				ЗаказКлиента.Договор = НайденныеСтроки[0].Договор;
			Иначе	
				ЗаказКлиента.Соглашение = Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор("291401e3-35d9-11e5-80cc-00155d849f05")); // Легковой Эксклюзив СПб / нал-терм 				
				ЗаказКлиента.Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор("cf7bd22e-f1ce-11e6-8106-001e675ad9d1"));	
			КонецЕсли;	
		ИначеЕсли ТипДоставки = НРег("Pickup") И ТипОплаты = НРег("BankTransferCompany") Тогда
			ЗаказКлиента.Соглашение = Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор("5a0013c3-3b50-11e5-80cd-00155d849f05")); // Легковой Эксклюзив / предоплата безнал
			ЗаказКлиента.Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор("1e6b7e77-9dd6-11e5-80d7-00155d9e7415"));								
		ИначеЕсли ТипДоставки <> НРег("Pickup") И (ТипОплаты = НРег("BankTransferCompany") ИЛИ ТипОплаты = НРег("BankTransferIndividual") ИЛИ ТипОплаты = НРег("Online")) Тогда
			ЗаказКлиента.Соглашение = Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор("5a0013c3-3b50-11e5-80cd-00155d849f05")); // Легковой Эксклюзив / предоплата безнал
			ЗаказКлиента.Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор("1e6b7e77-9dd6-11e5-80d7-00155d9e7415"));								
		ИначеЕсли ТипДоставки <> НРег("Pickup") И ТипОплаты = НРег("CashOrCardOnReceipt") Тогда
			ЗаказКлиента.Соглашение = Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор("c6c10c3e-99b4-11e5-80cf-00155d9e7415")); // Легковой Эксклюзив / нал
			ЗаказКлиента.Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор("1e6b7e77-9dd6-11e5-80d7-00155d9e7415"));												
		КонецЕсли;
		
		ЗаказКлиента.ФормаОплаты 	= ?(ТипОплаты = НРег("CashOrCardOnReceipt"),Перечисления.ФормыОплаты.Наличная,Перечисления.ФормыОплаты.Безналичная);
		ЗаказКлиента.Статус		= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ЗаказКлиента.Приоритет		= Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		ЗаказКлиента.СпособДоставки= Перечисления.СпособыДоставки.Самовывоз;

		//Притула Р.В. Начало 07.11.2018 #2480
		//теперь выполняется после заполнения товаров
		//Если ВалидныйПромокод И Не ПрименяемПромокод Тогда
		//	ЗаказКлиента.КартаЛояльности = Справочники.КартыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор("8cdb1dfd-1b75-11e7-8107-001e675ad9d1")); // Интернет-магазин 0010001018799				
		//КонецЕсли;
		//Притула Р.В. Конец  07.11.2018
		
		Если ЗначениеЗаполнено(ЗаказКлиента.Соглашение) Тогда
			ЗаказКлиента.НеОтгружатьЧастями = Истина;
			ЗаказКлиента.ДатаОтгрузки = ЗаказКлиента.Дата;	
			ЗаказКлиента.ЦенаВключаетНДС = Истина;
			ЗаказКлиента.НалогообложениеНДС = ЗаказКлиента.Соглашение.НалогообложениеНДС;
		КонецЕсли;
		
		ЗаказКлиента.Склад = Склад;
		ЗаказКлиента.Подразделение = ЗаказКлиента.Склад.Подразделение;
		
		ЗаказКлиента.Товары.Очистить();
		
		НомерТелефонаКлиента = структураЗаказ.client.phone;
		ФИОКлиента = структураЗаказ.client.name;
		СуммаПоЗаказуСайта = 0;
		
		ЭтоПозицияРаспродажи = ?(структураЗаказ.sale=1,Истина,Ложь);			
		
		массивОшибки = Новый Массив;
		
		КомментарийПоТоварам = "";
		
		Для Каждого структураТовар Из структураЗаказ.goods Цикл
			
			Номенклатура = НайтиСоздатьНоменклатуруССайта(структураТовар,массивОшибки,КомментарийПоТоварам);
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			//Самойлов А.С. Начало 2018-11-15 #2898
			//Если НЕ ЗначениеЗаполнено(структураТовар.good_id) Тогда
			//	Продолжить;
			//КонецЕсли;
			//Самойлов А.С. Конец  2018-11-15
			
			новСтрТовар = ЗаказКлиента.Товары.Добавить();
			новСтрТовар.ВидЦены = ЗаказКлиента.Соглашение.ВидЦен;
			новСтрТовар.Количество = структураТовар.quantity;
			Если новСтрТовар.Количество = 0 Тогда
				новСтрТовар.Количество = 1;
			КонецЕсли;
			новСтрТовар.КоличествоУпаковок = новСтрТовар.Количество;
			
			//Самойлов А.С. Начало 2018-11-15 #2898		
			//новСтрТовар.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(структураТовар.good_id));
			новСтрТовар.Номенклатура = Номенклатура;
			//Самойлов А.С. Конец  2018-11-15
			новСтрТовар.Цена = Число(структураТовар.price);
			
			//Самойлов А.С. Начало 2018-11-15 #2898
			//Если НЕ ЗначениеЗаполнено(новСтрТовар.Номенклатура.Наименование) Тогда
			//	массивОшибки.Добавить("Не найден товар с идентификатором " + структураТовар.good_id);
			//КонецЕсли; 
			//Самойлов А.С. Конец  2018-11-15
			
			новСтрТовар.Склад = ЗаказКлиента.Склад;
			новСтрТовар.Упаковка = новСтрТовар.Номенклатура.ЕдиницаИзмерения;
			
			Если ВалидныйПромокод = 1 И ЭтоПозицияРаспродажи = 1 Тогда
				новСтрТовар.ПроцентРучнойСкидки = -100;
			КонецЕсли; 				
						
		КонецЦикла;
		
		ЗаказКлиента.Комментарий = КомментарийПоТоварам;
		
		//Притула Р.В. Начало 07.11.2018 #2480		
		Если ВалидныйПромокод И Не ПрименяемПромокод Тогда
			ЗаказКлиента.КартаЛояльности = Справочники.КартыЛояльности.ПолучитьСсылку(Новый УникальныйИдентификатор("8cdb1dfd-1b75-11e7-8107-001e675ad9d1")); // Интернет-магазин 0010001018799				
		КонецЕсли;
       	//Притула Р.В. Конец  07.11.2018	
						
		Если массивОшибки.Количество() Тогда		
			
			ОтменитьТранзакцию();		
			
			структураРезультат.errorCode = 102;
			структураРезультат.errorDescription = СтрСоединить(массивОшибки,Символы.ПС);
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Ложь;
			мзЗагрузкаЗаказов.Записать();
			ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
			Возврат;
			
		КонецЕсли;
		
		ПереченьВариантов = Новый Массив();
		ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);			
		ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.Требуется);						

		ИндексыСтрок = Новый Массив();
		Для Индекс = 0 По ЗаказКлиента.Товары.Количество() - 1 Цикл ИндексыСтрок.Добавить(Индекс) КонецЦикла;
				
		ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыВыбораОбеспечения(ЗаказКлиента.Статус);
		ТаблицаОбеспечения = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(
			ЗаказКлиента, ПереченьВариантов, ПараметрыЗаполнения, ИндексыСтрок);
			
		Если ТипЗнч(ТаблицаОбеспечения) = Тип("ТаблицаЗначений") Тогда
			Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(ЗаказКлиента, Неопределено, "ИндексыСтрок", ТаблицаОбеспечения);
		КонецЕсли;
				
		ЗаказКлиента.СуммаДокумента = ЗаказКлиента.Товары.Итог("Сумма");
		
		ЗаказКлиента.ГрафикОплаты = ЗаказКлиента.Соглашение.ГрафикОплаты;		
		ЗаказКлиента.ЗаполнитьУсловияПродажПоСоглашению();
		
		Если ВалидныйПромокод = 1 Тогда				
			
			Если Не ПрименяемПромокод Тогда
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);			
				СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);	
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);			
				СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ЗаказКлиента, СтруктураПараметры);				
			Иначе				
				ПрименитьПромокод(ЗаказКлиента, Промокод);							
			КонецЕсли;
				
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);			
			СтруктураДействий = Новый Структура();
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			Для каждого стрТовар Из ЗаказКлиента.Товары Цикл
				Если стрТовар.ПроцентРучнойСкидки = -100 Тогда
					стрТовар.ПроцентРучнойСкидки = -стрТовар.ПроцентАвтоматическойСкидки;
					стрТовар.СуммаРучнойСкидки = -стрТовар.СуммаАвтоматическойСкидки;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(стрТовар, СтруктураДействий, Неопределено);					
				КонецЕсли;
			КонецЦикла; 			
			ЗаказКлиента.СкидкиРассчитаны = Истина;
		КонецЕсли;
		
		ЗаказКлиента.ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ЗаказКлиента.Дата,Перечисления.Периодичность.День, ЗаказКлиента.Соглашение.СрокПоставки) + 1;
		
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
				ЗаказКлиента,
				ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(ЗаказКлиента.Соглашение),
				ЗначениеЗаполнено(ЗаказКлиента.ГрафикОплаты),
				ЗаказКлиента.СуммаДокумента,
				0);
			
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(ЗаказКлиента.НаправлениеДеятельности, ЗаказКлиента.Соглашение, ЗаказКлиента.Договор);
			
		ИскомоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Сайт tyres.spb.ru: Номер заказа сайта (Список заказов клиентов)");
		НайденныеСтроки = ЗаказКлиента.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство",ИскомоеСвойство));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ЗаказКлиента.ДополнительныеРеквизиты.Добавить();
			СтрокаСвойства.Свойство = ИскомоеСвойство;		
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Значение = НомерЗаказа;
		
		ИскомоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Сайт tyres.spb.ru: Номер телефона (Список заказов клиентов)");
		НайденныеСтроки = ЗаказКлиента.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство",ИскомоеСвойство));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ЗаказКлиента.ДополнительныеРеквизиты.Добавить();
			СтрокаСвойства.Свойство = ИскомоеСвойство;		
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Значение = НомерТелефонаКлиента;
		
		ИскомоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Сайт tyres.spb.ru: ФИО (Список заказов клиентов)");
		НайденныеСтроки = ЗаказКлиента.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство",ИскомоеСвойство));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ЗаказКлиента.ДополнительныеРеквизиты.Добавить();
			СтрокаСвойства.Свойство = ИскомоеСвойство;		
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Значение = ФИОКлиента;
		
		ЗаказКлиента.ЗаполнитьЭтапыГрафикаОплаты();
		
		Если ТипДоставки <> НРег("Pickup") Тогда
			
			ЗаказКлиента.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
			Если структураЗаказ.delivery.address.Свойство("house") И ЗначениеЗаполнено(структураЗаказ.delivery.address.house) Тогда
				структураЗаказ.delivery.address.house = "д. " + структураЗаказ.delivery.address.house;
			КонецЕсли;
			
			Если структураЗаказ.delivery.address.Свойство("apartment") И ЗначениеЗаполнено(структураЗаказ.delivery.address.apartment) Тогда
				структураЗаказ.delivery.address.apartment = "кв. " + структураЗаказ.delivery.address.apartment;
			КонецЕсли;
			
			мсвЧастиАдреса = Новый Массив;
			Для Каждого ЧастьАдреса Из структураЗаказ.delivery.address Цикл
				Если ЗначениеЗаполнено(ЧастьАдреса.Значение) Тогда
					мсвЧастиАдреса.Добавить(ЧастьАдреса.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ЗаказКлиента.АдресДоставки = СтрСоединить(мсвЧастиАдреса,",");
			
		КонецЕсли;
		
		//Самойлов А.С. Начало 2018-09-20 #1.26
		Если ЗаказКлиента.Товары.Количество() = 0 Тогда
			
			ЗаказКлиента.Записать();		
			
			структураРезультат.errorCode = 100;
			структураРезультат.errorDescription = "Нет ни одного товара, который можно включить в заказ (только товары поставщиков)";
			структураРезультат.order_1c_number = Лев(ЗаказКлиента.Номер,2) + Формат(Число(Сред(ЗаказКлиента.Номер,6)),"ЧЦ=6; ЧДЦ=; ЧГ=0");
			структураРезультат.Вставить("status",5);
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Истина;
			мзЗагрузкаЗаказов.Записать();
			ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
			
			ЗафиксироватьТранзакцию();
			
			Возврат;	
			
		КонецЕсли;
		//Самойлов А.С. Конец  2018-09-20
		
		Попытка
			ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
						
			Если ЗаказКлиента.Проведен Тогда
				ВсеОбеспечили = Ложь;
				СформироватьЗаказыНаПеремещениеНаСкладЗаказа(ЗаказКлиента, ТаблицаСкладов, НомерЗаказа, ВсеОбеспечили);		
			КонецЕсли;	
							
			Если (ЗаказКлиента.Товары.Количество() > 0 И ЗаказКлиента.Товары.Найти(Перечисления.ВариантыОбеспечения.Требуется,"ВариантОбеспечения") = Неопределено)
				ИЛИ (ЗаказКлиента.Товары.Количество() > 0 И ВсеОбеспечили) Тогда				
				СтатусЗаказа = 6;				
			Иначе				
				СтатусЗаказа = 5;
				структураРезультат.errorCode = 100;
				структураРезультат.errorDescription = "Не удалось зарезервировать все товары по заказу";
			КонецЕсли;
			
			Если настройкиЗагрузкиЗаказов.Свойство("АдресДляОповещения") И ЗначениеЗаполнено(настройкиЗагрузкиЗаказов.АдресДляОповещения) Тогда
				Экс_ОбщегоНазначенияСервер.СоздатьИсходящееПисьмо(настройкиЗагрузкиЗаказов.АдресДляОповещения,"Загружен новый заказ с tyres.spb.ru. Номер " + ЗаказКлиента.Номер,"Загружен новый заказ с tyres.spb.ru. Номер " + ЗаказКлиента.Номер);
			КонецЕсли;
			
			структураРезультат.order_1c_number = Лев(ЗаказКлиента.Номер,2) + Формат(Число(Сред(ЗаказКлиента.Номер,6)),"ЧЦ=6; ЧДЦ=; ЧГ=0");
			
			//Самойлов А.С. Начало 2018-10-19 #1163
			структураРезультат.order_id_full = Строка(ЗаказКлиента.Ссылка.УникальныйИдентификатор());
			//Самойлов А.С. Конец  2018-10-19
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Истина;
			мзЗагрузкаЗаказов.Записать();
			ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ЗаказКлиента.Записать();
			
			Если настройкиЗагрузкиЗаказов.Свойство("АдресДляОповещения") И ЗначениеЗаполнено(настройкиЗагрузкиЗаказов.АдресДляОповещения) Тогда
				Экс_ОбщегоНазначенияСервер.СоздатьИсходящееПисьмо(настройкиЗагрузкиЗаказов.АдресДляОповещения,"Загружен новый заказ с tyres.spb.ru. Номер " + ЗаказКлиента.Номер,"Загружен новый заказ с tyres.spb.ru. Номер " + ЗаказКлиента.Номер);
			КонецЕсли;
			
			структураРезультат.order_1c_number = Лев(ЗаказКлиента.Номер,2) + Формат(Число(Сред(ЗаказКлиента.Номер,6)),"ЧЦ=6; ЧДЦ=; ЧГ=0");
			структураРезультат.Вставить("status",5);
			
			мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
			мзЗагрузкаЗаказов.Успешно = Истина;
			мзЗагрузкаЗаказов.Записать();
			ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
			
			ЗафиксироватьТранзакцию();
		КонецПопытки;
			
	Исключение
		ОтменитьТранзакцию();
		массивОшибки.Добавить("Неклассифицированная ошибка проведения документа в 1С");
		массивОшибки.Добавить(ОписаниеОшибки());
		
		структураРезультат.errorCode = 104;
		структураРезультат.errorDescription = СтрСоединить(массивОшибки,Символы.ПС);
		
		мзЗагрузкаЗаказов.Результат = СтруктуруВJSON(структураРезультат);
		мзЗагрузкаЗаказов.Успешно = Ложь;
		мзЗагрузкаЗаказов.Записать();
		ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов);
	КонецПопытки;
			
КонецПроцедуры

Процедура ОтправитьРезультатЗагрузкиЗаказа(мзЗагрузкаЗаказов)
	
	мзЗагрузкаЗаказов.Обработано = Истина;
	
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Option(2,"utf-8");
	WinHttp.SetTimeouts(0,60000,30000,30000);
	
	Если Экс_ОбщегоНазначенияСервер.ЭтоТестоваяБаза() Тогда
		АдресЗапроса = "http://test.tyres.spb.ru/api/order/order-handler/one-c-response";
	Иначе
		АдресЗапроса = "https://tyres.spb.ru/api/order/order-handler/one-c-response";
	КонецЕсли;
					
	WinHttp.Open("POST",АдресЗапроса,0);
			
    WinHttp.SetRequestHeader("Accept-Language", "ru");
    WinHttp.SetRequestHeader("Accept-Charset","utf-8");
    WinHttp.setRequestHeader("Content-Language", "ru");
    WinHttp.setRequestHeader("Content-Charset", "utf-8");
    WinHttp.setRequestHeader("Content-type", "application/json; charset=utf-8");
					
	WinHttp.Send(мзЗагрузкаЗаказов.Результат);
	
	ТекстОтвета = WinHttp.ResponseText();
	
	мзЗагрузкаЗаказов.Записать();
	
КонецПроцедуры
//Самойлов А.С. Конец  2018-09-05

//Самойлов А.С. Начало 2018-11-13 #2898
Функция НайтиСоздатьНоменклатуруССайта(структураТовар, массивОшибки,Комментарий) Экспорт
	
	Если ЗначениеЗаполнено(структураТовар.good_id) Тогда
	
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(структураТовар.good_id));
					                        		
		Если НЕ ЗначениеЗаполнено(Номенклатура.Наименование) Тогда
			массивОшибки.Добавить("Не найден товар с идентификатором " + структураТовар.good_id);
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Номенклатура;
		
	Иначе
		
		Возврат НайтиСоздатьТоварПоПараметрам(структураТовар,массивОшибки,Комментарий);		
		
	КонецЕсли;
	
КонецФункции

Функция ИндексГрузоподъемности(Индексы)
	
	Результат = "";
	Для Н = 1 По стрДлина(Индексы) Цикл
		
		Если СтрНайти("0123456789/",Сред(Индексы,Н,1)) > 0 Тогда
			Результат = Результат + Сред(Индексы,Н,1);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИндексСкорости(Знач Индексы)
	
	Индексы = СтрЗаменить(Индексы," XL","");
	Индексы = СтрЗаменить(Индексы,"XL ","");
	Индексы = СтрЗаменить(Индексы,"XL","");
	
	Для Н = 1 По стрДлина(Индексы) Цикл
		
		Если СтрНайти("0123456789/",Сред(Индексы,Н,1)) = 0 Тогда
			Возврат Сред(Индексы,Н);
		КонецЕсли;
		
	КонецЦикла;	
		
КонецФункции

Функция XL(Знач Индексы)
	
	Если СтрНайти(Индексы,"XL") <> 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;		
	КонецЕсли;
		
КонецФункции

Функция НайтиСоздатьТоварПоПараметрам(структураТовар,массивОшибок,Комментарий)
	
	//массивОшибок.Добавить("Отладка");
	
	настройкаСоответствиеВидов = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("ОбменССайтом_СоответствиеВидовНоменклатуры",Истина,Ложь);
	строкаВид = настройкаСоответствиеВидов.Найти(структураТовар.type);
	Если строкаВид = Неопределено Тогда
		//массивОшибок.Добавить("Не удалось определить вид номенклатуры для типа товара " + структураТовар.type);
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			Комментарий = Комментарий + Символы.ПС;
		КонецЕсли;
		
		Комментарий = Комментарий + "Не была обработана позиция заказа """ + структураТовар.attributes.onec_txt + """ с id = """ + структураТовар.attributes.id + """ с типом """ + структураТовар.type + """";
		Возврат Неопределено;
		
	КонецЕсли;
	
	ВидНоменклатуры = строкаВид.ВидНоменклатуры;
	
	настройкаРеквизиты = Экс_ОбщегоНазначенияСервер.ПолучитьВнешнююНастройку("ОбменССайтом_СоответствиеРеквизитов",Истина,Ложь);
	
	строкиРеквизиты = настройкаРеквизиты.НайтиСтроки(Новый Структура("ВидНоменклатуры",ВидНоменклатуры));
	
	//Здесь создаём и заполняем доп. реквизиты. Если нашлась подходящая - эту просто не записываем
	новНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	ЗапросПоиск = Новый Запрос;
	ЗапросПоиск.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаНоменклатура
	|";
	
	ТекстУсловия = Символы.ПС +
	"ГДЕ ТаблицаНоменклатура.ВидНоменклатуры = &ВидНоменклатуры";
	
	ИндексТекущегоРеквизита = 1;
	
	Для Каждого строкаРеквизит Из строкиРеквизиты Цикл
		
		ИндексСтрокой = Формат(ИндексТекущегоРеквизита,"ЧЦ=3; ЧДЦ=0; ЧРД=; ЧРГ=; ЧН=000; ЧВН=; ЧГ=");
				
		Попытка
			РеквизитССайта = структураТовар.attributes[строкаРеквизит.НаименованиеРеквизитаССайта];
		Исключение
			массивОшибок.Добавить("Для товара с id " + структураТовар.good_id_market + " не передано значение обязательного реквизита " + строкаРеквизит.НаименованиеРеквизитаССайта);
			Возврат Неопределено;	
		КонецПопытки;
		
		Если НЕ строкаРеквизит.НеУчаствуетВПоиске И РеквизитССайта = Null Тогда
			массивОшибок.Добавить("Для товара с id " + структураТовар.good_id_market + " не передано значение обязательного реквизита " + строкаРеквизит.НаименованиеРеквизитаССайта);
			Возврат Неопределено;
		КонецЕсли;
					
		ТипЗначения = строкаРеквизит.ДополнительныйРеквизит.ТипЗначения;
		
		ЗначениеРеквизита = Неопределено;
		Если ЗначениеЗаполнено(строкаРеквизит.АлгоритмПреобразования) Тогда
			Выполнить(строкаРеквизит.АлгоритмПреобразования);
		ИначеЕсли ТипЗначения.СодержитТип(Тип("Булево")) Тогда
			ЗначениеРеквизита = ?(РеквизитССайта = 0, Ложь, Истина);
		ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			Если ТипЗнч(РеквизитССайта) = Тип("Число") Тогда
				РеквизитССайта = Формат(РеквизитССайта,"ЧРД=.; ЧРГ=; ЧН=0; ЧГ=");
			КонецЕсли; 		
			
			Если строкаРеквизит.НаименованиеРеквизитаССайта = "model" 
				И структураТовар.attributes.Свойство("brand")
				И ЗначениеЗаполнено(структураТовар.attributes.brand) Тогда
				Родитель = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(структураТовар.attributes.brand,Истина,Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
			Иначе
				Родитель = Неопределено;
			КонецЕсли;
			
			ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(РеквизитССайта,Истина,Родитель,строкаРеквизит.ДополнительныйРеквизит);
			Если ЗначениеРеквизита.Пустая() Тогда
				ЗначениеДопРеквизитаОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				ЗначениеДопРеквизитаОбъект.Наименование = РеквизитССайта;
				ЗначениеДопРеквизитаОбъект.Родитель = Родитель;
				
				ЗначениеДопРеквизитаОбъект.Владелец = строкаРеквизит.ДополнительныйРеквизит;
				ЗначениеДопРеквизитаОбъект.Записать();
				ЗначениеРеквизита = ЗначениеДопРеквизитаОбъект.Ссылка;
			КонецЕсли;
		ИначеЕсли ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
			Если ТипЗнч(РеквизитССайта) = Тип("Число") Тогда
				РеквизитССайта = Формат(РеквизитССайта,"ЧРД=.; ЧРГ=; ЧН=0; ЧГ=");
			КонецЕсли;
			
			Если строкаРеквизит.НаименованиеРеквизитаССайта = "model" 
				И структураТовар.attributes.Свойство("brand")
				И ЗначениеЗаполнено(структураТовар.attributes.brand) Тогда
				Родитель = Справочники.ЗначенияСвойствОбъектовИерархия.НайтиПоНаименованию(структураТовар.attributes.brand,Истина,Справочники.ЗначенияСвойствОбъектовИерархия.ПустаяСсылка());
			Иначе
				Родитель = Неопределено;
			КонецЕсли;
			
			ЗначениеРеквизита = Справочники.ЗначенияСвойствОбъектовИерархия.НайтиПоНаименованию(РеквизитССайта,Истина,Родитель,строкаРеквизит.ДополнительныйРеквизит);
			Если ЗначениеРеквизита.Пустая() Тогда
				ЗначениеДопРеквизитаОбъект = Справочники.ЗначенияСвойствОбъектовИерархия.СоздатьЭлемент();
				ЗначениеДопРеквизитаОбъект.Наименование = РеквизитССайта;
				ЗначениеДопРеквизитаОбъект.Родитель = Родитель;
				ЗначениеДопРеквизитаОбъект.Владелец = строкаРеквизит.ДополнительныйРеквизит;
				ЗначениеДопРеквизитаОбъект.Записать();
				ЗначениеРеквизита = ЗначениеДопРеквизитаОбъект.Ссылка;
			КонецЕсли; 			
		Иначе
			ЗначениеРеквизита = РеквизитССайта;			
		КонецЕсли;
		
		Если ЗначениеРеквизита = Неопределено И строкаРеквизит.НеУчаствуетВПоиске Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеРеквизита = Неопределено Тогда
			массивОшибок.Добавить("Для товара с id " + структураТовар.good_id_market + " не удалось получить значение обязательного реквизита " + строкаРеквизит.НаименованиеРеквизитаССайта);
			Возврат Неопределено;	
		КонецЕсли;
		
		новСтрДопРеквизиты = новНоменклатура.ДополнительныеРеквизиты.Добавить();
		новСтрДопРеквизиты.Свойство = строкаРеквизит.ДополнительныйРеквизит;
		новСтрДопРеквизиты.Значение = ЗначениеРеквизита;
		Если ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			новСтрДопРеквизиты.ТекстоваяСтрока = ЗначениеРеквизита;
		КонецЕсли;
		
		Если НЕ строкаРеквизит.НеУчаствуетВПоиске Тогда
		
			ЗапросПоиск.Текст = ЗапросПоиск.Текст +
			"		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
			|			НоменклатураДополнительныеРеквизиты.Значение КАК Значение
			|		ИЗ
			|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			|		ГДЕ
			|			НоменклатураДополнительныеРеквизиты.Свойство = &ДополнительныйРеквизит" + ИндексСтрокой +"
			|			) КАК ТаблицаДополнительныйРеквизит" + ИндексСтрокой +"
			|		ПО (ТаблицаНоменклатура.Ссылка = ТаблицаДополнительныйРеквизит" + ИндексСтрокой +".Номенклатура)
			|";
						
			ТекстУсловия = ТекстУсловия + Символы.ПС +
			"И (ТаблицаДополнительныйРеквизит" + ИндексСтрокой +".Значение = &Значение" + ИндексСтрокой +" ИЛИ (ТаблицаДополнительныйРеквизит" + ИндексСтрокой +".Значение ЕСТЬ NULL И &Значение" + ИндексСтрокой +" = ЛОЖЬ))";			
			
			ЗапросПоиск.УстановитьПараметр("ДополнительныйРеквизит" + ИндексСтрокой,новСтрДопРеквизиты.Свойство);
			ЗапросПоиск.УстановитьПараметр("Значение" + ИндексСтрокой,новСтрДопРеквизиты.Значение);
			
			ИндексТекущегоРеквизита = ИндексТекущегоРеквизита + 1;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗапросПоиск.Текст = ЗапросПоиск.Текст + ТекстУсловия; 	
	
	ЗапросПоиск.УстановитьПараметр("ВидНоменклатуры",ВидНоменклатуры);
	
	Выборка = ЗапросПоиск.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			Комментарий = Комментарий + Символы.ПС;
		КонецЕсли;
		
		Комментарий = Комментарий + "НАЙДЕНА номенклатура по параметрам """ + структураТовар.attributes.onec_txt + " (" + структураТовар.attributes.id + ") ---> """  + Выборка.Номенклатура.Наименование + """";
		
		Возврат Выборка.Номенклатура;	
	КонецЕсли; 	
		
	новНоменклатура.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Неразобранное с tyres.spb.ru",Истина);
	Если строкаВид.НаименованиеССайта = "tires" Тогда
		новНоменклатура.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Шины",Истина,новНоменклатура.Родитель);
	ИначеЕсли строкаВид.НаименованиеССайта = "disks" Тогда
		новНоменклатура.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Диски",Истина,новНоменклатура.Родитель);
	Иначе		
		новНоменклатура.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Прочее",Истина,новНоменклатура.Родитель);
	КонецЕсли;
	
	//новНоменклатура.Артикул = ДанныеКолеса.code;
	новНоменклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	новНоменклатура.ВестиУчетПоГТД = Истина;
	новНоменклатура.ВидНоменклатуры = ВидНоменклатуры;
	новНоменклатура.ЕдиницаИзмерения = новНоменклатура.ВидНоменклатуры.ЕдиницаИзмерения;
	новНоменклатура.ЕдиницаДляОтчетов = новНоменклатура.ЕдиницаИзмерения;
	новНоменклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	новНоменклатура.Качество = Перечисления.ГрадацииКачества.Новый;
	
	Если структураТовар.attributes.Свойство("brand") Тогда
		новНоменклатура.Марка = Справочники.Марки.НайтиПоНаименованию(структураТовар.attributes.brand,Истина);
		новНоменклатура.Производитель = Справочники.Производители.НайтиПоНаименованию(структураТовар.attributes.brand,Истина);
	КонецЕсли;	
	
	//новНоменклатура.НаименованиеПолное = "Автошина " + ?(ЗначениеЗаполнено(новНоменклатура.Марка.Наименование),новНоменклатура.Марка.Наименование + " ","") + новНоменклатура.Наименование; 
	новНоменклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	новНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	новНоменклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.НайтиПоНаименованию("Основная схема обеспечения (создана при обновлении ИБ)",Истина);
	новНоменклатура.КоэффициентЕдиницыДляОтчетов = 1;
	
	Экс_ОбщегоНазначенияСервер.УстановитьЗначениеДопРеквизитаНомеклатуры(новНоменклатура,"Выгружать на сайт tyres.spb.ru","Да",Ложь);
	
	
	новНоменклатура.Наименование = НоменклатураСервер.НаименованиеПоШаблону(строкаВид.ШаблонНаименования, новНоменклатура);
	новНоменклатура.НаименованиеПолное = новНоменклатура.Наименование;
	
	новНоменклатура.СкладскаяГруппа = Справочники.СкладскиеГруппыНоменклатуры.НайтиПоНаименованию("Товар");
	новНоменклатура.ИспользоватьУпаковки = Истина;
	новНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.НайтиПоНаименованию("шт");
	
	новНоменклатура.Записать();
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = Комментарий + Символы.ПС;
	КонецЕсли;
	
	Комментарий = Комментарий + "СОЗДАНА номенклатура по параметрам """ + структураТовар.attributes.onec_txt + " (" + структураТовар.attributes.id + ") ---> """  + новНоменклатура.Наименование + """";
		
	//Цены
	//ЗапросУстановкаЦен = Новый Запрос;	  
	//ЗапросУстановкаЦен.Текст =
	//"ВЫБРАТЬ
	//|    УстановкаЦенНоменклатуры.Ссылка КАК Ссылка
	//|ИЗ
	//|    Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	//|ГДЕ
	//|    НАЧАЛОПЕРИОДА(УстановкаЦенНоменклатуры.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	//|    И УстановкаЦенНоменклатуры.Комментарий ПОДОБНО ""#Загрузка товаров с tyres.spb.ru""";
	
	//ЗапросУстановкаЦен.УстановитьПараметр("ТекДата",ТекущаяДата());
	
	//ВыборкаУстановкаЦен = ЗапросУстановкаЦен.Выполнить().Выбрать();
	
	Закупочная = Справочники.ВидыЦен.НайтиПоНаименованию("0.Закупочная",Истина);
	Оптовая = Справочники.ВидыЦен.НайтиПоНаименованию("3.Оптовая",Истина);
	Розничная = Справочники.ВидыЦен.НайтиПоНаименованию("1.Розничная",Истина);
	B2B = Справочники.ВидыЦен.НайтиПоНаименованию("B2B",Истина);
	
	//Если ВыборкаУстановкаЦен.Следующий() Тогда
	//	докУстановкаЦен = ВыборкаУстановкаЦен.Ссылка.ПолучитьОбъект();
	//Иначе
		докУстановкаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		докУстановкаЦен.Дата = ТекущаяДата();
		докУстановкаЦен.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		докУстановкаЦен.Комментарий = "#Загрузка товаров с tyres.spb.ru";
		
		стрВидыЦен = докУстановкаЦен.ВидыЦен.Добавить();
		стрВидыЦен.ВидЦены = Закупочная;
		
		стрВидыЦен = докУстановкаЦен.ВидыЦен.Добавить();
		стрВидыЦен.ВидЦены = Оптовая;
		
		стрВидыЦен = докУстановкаЦен.ВидыЦен.Добавить();
		стрВидыЦен.ВидЦены = Розничная;
		
		стрВидыЦен = докУстановкаЦен.ВидыЦен.Добавить();
		стрВидыЦен.ВидЦены = B2B;		
	//КонецЕсли;
	
	Если структураТовар.attributes.Свойство("price_base") Тогда
		новСтрТовар = докУстановкаЦен.Товары.Добавить();
		новСтрТовар.Номенклатура = новНоменклатура.Ссылка;
		новСтрТовар.ВидЦены = Закупочная;
		новСтрТовар.Цена = структураТовар.attributes.price_base;
	КонецЕсли;
	
	Если структураТовар.attributes.Свойство("price_wholesale_large") Тогда
		новСтрТовар = докУстановкаЦен.Товары.Добавить();
		новСтрТовар.Номенклатура = новНоменклатура.Ссылка;
		новСтрТовар.ВидЦены = Оптовая;
		новСтрТовар.Цена = структураТовар.attributes.price_wholesale_large;
	КонецЕсли;
	
	Если структураТовар.attributes.Свойство("price_retail") Тогда		
		новСтрТовар = докУстановкаЦен.Товары.Добавить();
		новСтрТовар.Номенклатура = новНоменклатура.Ссылка;
		новСтрТовар.ВидЦены = Розничная;
		новСтрТовар.Цена = структураТовар.attributes.price_retail;
	КонецЕсли;
	
	Если структураТовар.attributes.Свойство("price_b2b") Тогда	
		новСтрТовар = докУстановкаЦен.Товары.Добавить();
		новСтрТовар.Номенклатура = новНоменклатура.Ссылка;
		новСтрТовар.ВидЦены = B2B;
		новСтрТовар.Цена = структураТовар.attributes.price_b2b;
	КонецЕсли;
		
	докУстановкаЦен.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат новНоменклатура.Ссылка;	
	
КонецФункции
//Самойлов А.С. Конец  2018-11-13